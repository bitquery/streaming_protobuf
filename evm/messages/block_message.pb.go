// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: evm/block_message.proto

package evm_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddressCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash     []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Size     int32  `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	Suicided bool   `protobuf:"varint,3,opt,name=Suicided,proto3" json:"Suicided,omitempty"`
}

func (x *AddressCode) Reset() {
	*x = AddressCode{}
	mi := &file_evm_block_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressCode) ProtoMessage() {}

func (x *AddressCode) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressCode.ProtoReflect.Descriptor instead.
func (*AddressCode) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *AddressCode) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *AddressCode) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddressCode) GetSuicided() bool {
	if x != nil {
		return x.Suicided
	}
	return false
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ParentHash  []byte `protobuf:"bytes,2,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	UncleHash   []byte `protobuf:"bytes,3,opt,name=UncleHash,proto3" json:"UncleHash,omitempty"`
	Root        []byte `protobuf:"bytes,4,opt,name=Root,proto3" json:"Root,omitempty"`
	TxHash      []byte `protobuf:"bytes,5,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	ReceiptHash []byte `protobuf:"bytes,6,opt,name=ReceiptHash,proto3" json:"ReceiptHash,omitempty"`
	MixDigest   []byte `protobuf:"bytes,7,opt,name=MixDigest,proto3" json:"MixDigest,omitempty"`
	Coinbase    []byte `protobuf:"bytes,8,opt,name=Coinbase,proto3" json:"Coinbase,omitempty"`
	Bloom       []byte `protobuf:"bytes,9,opt,name=Bloom,proto3" json:"Bloom,omitempty"`
	Extra       []byte `protobuf:"bytes,10,opt,name=Extra,proto3" json:"Extra,omitempty"`
	Nonce       uint64 `protobuf:"varint,11,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Difficulty  []byte `protobuf:"bytes,12,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	Number      []byte `protobuf:"bytes,13,opt,name=Number,proto3" json:"Number,omitempty"`
	GasLimit    uint64 `protobuf:"varint,14,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	GasUsed     uint64 `protobuf:"varint,15,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Time        uint64 `protobuf:"varint,16,opt,name=Time,proto3" json:"Time,omitempty"`
	BaseFee     []byte `protobuf:"bytes,17,opt,name=BaseFee,proto3" json:"BaseFee,omitempty"`
	// only applicable for optimism
	SequenceNumber *uint64 `protobuf:"varint,18,opt,name=SequenceNumber,proto3,oneof" json:"SequenceNumber,omitempty"`
	// only applicable for optimism
	BatcherAddr []byte `protobuf:"bytes,19,opt,name=BatcherAddr,proto3,oneof" json:"BatcherAddr,omitempty"`
	// only applicable for optimism
	L1FeeOverhead []byte `protobuf:"bytes,20,opt,name=L1FeeOverhead,proto3,oneof" json:"L1FeeOverhead,omitempty"`
	// only applicable for optimism
	L1FeeScalar []byte `protobuf:"bytes,21,opt,name=L1FeeScalar,proto3,oneof" json:"L1FeeScalar,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	mi := &file_evm_block_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{1}
}

func (x *BlockHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockHeader) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BlockHeader) GetUncleHash() []byte {
	if x != nil {
		return x.UncleHash
	}
	return nil
}

func (x *BlockHeader) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *BlockHeader) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *BlockHeader) GetReceiptHash() []byte {
	if x != nil {
		return x.ReceiptHash
	}
	return nil
}

func (x *BlockHeader) GetMixDigest() []byte {
	if x != nil {
		return x.MixDigest
	}
	return nil
}

func (x *BlockHeader) GetCoinbase() []byte {
	if x != nil {
		return x.Coinbase
	}
	return nil
}

func (x *BlockHeader) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *BlockHeader) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *BlockHeader) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BlockHeader) GetDifficulty() []byte {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *BlockHeader) GetNumber() []byte {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *BlockHeader) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *BlockHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *BlockHeader) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BlockHeader) GetBaseFee() []byte {
	if x != nil {
		return x.BaseFee
	}
	return nil
}

func (x *BlockHeader) GetSequenceNumber() uint64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *BlockHeader) GetBatcherAddr() []byte {
	if x != nil {
		return x.BatcherAddr
	}
	return nil
}

func (x *BlockHeader) GetL1FeeOverhead() []byte {
	if x != nil {
		return x.L1FeeOverhead
	}
	return nil
}

func (x *BlockHeader) GetL1FeeScalar() []byte {
	if x != nil {
		return x.L1FeeScalar
	}
	return nil
}

type BlockResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gas    uint64 `protobuf:"varint,1,opt,name=Gas,proto3" json:"Gas,omitempty"`
	Errors string `protobuf:"bytes,2,opt,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *BlockResult) Reset() {
	*x = BlockResult{}
	mi := &file_evm_block_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResult) ProtoMessage() {}

func (x *BlockResult) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResult.ProtoReflect.Descriptor instead.
func (*BlockResult) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *BlockResult) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *BlockResult) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R []byte `protobuf:"bytes,1,opt,name=R,proto3" json:"R,omitempty"`
	V []byte `protobuf:"bytes,2,opt,name=V,proto3" json:"V,omitempty"`
	S []byte `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_evm_block_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *Signature) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *Signature) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *Signature) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	mi := &file_evm_block_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{4}
}

func (x *Topic) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Topic) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type LogHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       uint64       `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Address     []byte       `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Data        []byte       `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Removed     bool         `protobuf:"varint,4,opt,name=Removed,proto3" json:"Removed,omitempty"`
	AddressCode *AddressCode `protobuf:"bytes,5,opt,name=AddressCode,proto3" json:"AddressCode,omitempty"`
	IsSystem    *bool        `protobuf:"varint,6,opt,name=IsSystem,proto3,oneof" json:"IsSystem,omitempty"`
}

func (x *LogHeader) Reset() {
	*x = LogHeader{}
	mi := &file_evm_block_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogHeader) ProtoMessage() {}

func (x *LogHeader) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogHeader.ProtoReflect.Descriptor instead.
func (*LogHeader) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{5}
}

func (x *LogHeader) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LogHeader) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *LogHeader) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogHeader) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *LogHeader) GetAddressCode() *AddressCode {
	if x != nil {
		return x.AddressCode
	}
	return nil
}

func (x *LogHeader) GetIsSystem() bool {
	if x != nil && x.IsSystem != nil {
		return *x.IsSystem
	}
	return false
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogHeader *LogHeader `protobuf:"bytes,1,opt,name=LogHeader,proto3" json:"LogHeader,omitempty"`
	Topics    []*Topic   `protobuf:"bytes,2,rep,name=Topics,proto3" json:"Topics,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_evm_block_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{6}
}

func (x *Log) GetLogHeader() *LogHeader {
	if x != nil {
		return x.LogHeader
	}
	return nil
}

func (x *Log) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Location []byte `protobuf:"bytes,2,opt,name=Location,proto3" json:"Location,omitempty"`
	Value    []byte `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	mi := &file_evm_block_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{7}
}

func (x *Store) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Store) GetLocation() []byte {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Store) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ReceiptHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bloom               []byte              `protobuf:"bytes,1,opt,name=Bloom,proto3" json:"Bloom,omitempty"`
	GasUsed             uint64              `protobuf:"varint,2,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Type                uint32              `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	ContractAddress     []byte              `protobuf:"bytes,4,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	CumulativeGasUsed   uint64              `protobuf:"varint,5,opt,name=CumulativeGasUsed,proto3" json:"CumulativeGasUsed,omitempty"`
	PostState           []byte              `protobuf:"bytes,6,opt,name=PostState,proto3" json:"PostState,omitempty"`
	Status              uint64              `protobuf:"varint,7,opt,name=Status,proto3" json:"Status,omitempty"`
	ContractAddressCode *AddressCode        `protobuf:"bytes,8,opt,name=ContractAddressCode,proto3" json:"ContractAddressCode,omitempty"`
	L1                  *ReceiptL1Extension `protobuf:"bytes,9,opt,name=L1,proto3,oneof" json:"L1,omitempty"`
	EffectiveGasPrice   []byte              `protobuf:"bytes,10,opt,name=EffectiveGasPrice,proto3,oneof" json:"EffectiveGasPrice,omitempty"`
	BlobGasUsed         *uint64             `protobuf:"varint,11,opt,name=BlobGasUsed,proto3,oneof" json:"BlobGasUsed,omitempty"`
	BlobGasPrice        []byte              `protobuf:"bytes,12,opt,name=BlobGasPrice,proto3,oneof" json:"BlobGasPrice,omitempty"`
}

func (x *ReceiptHeader) Reset() {
	*x = ReceiptHeader{}
	mi := &file_evm_block_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptHeader) ProtoMessage() {}

func (x *ReceiptHeader) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptHeader.ProtoReflect.Descriptor instead.
func (*ReceiptHeader) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{8}
}

func (x *ReceiptHeader) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *ReceiptHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ReceiptHeader) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReceiptHeader) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *ReceiptHeader) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *ReceiptHeader) GetPostState() []byte {
	if x != nil {
		return x.PostState
	}
	return nil
}

func (x *ReceiptHeader) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReceiptHeader) GetContractAddressCode() *AddressCode {
	if x != nil {
		return x.ContractAddressCode
	}
	return nil
}

func (x *ReceiptHeader) GetL1() *ReceiptL1Extension {
	if x != nil {
		return x.L1
	}
	return nil
}

func (x *ReceiptHeader) GetEffectiveGasPrice() []byte {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return nil
}

func (x *ReceiptHeader) GetBlobGasUsed() uint64 {
	if x != nil && x.BlobGasUsed != nil {
		return *x.BlobGasUsed
	}
	return 0
}

func (x *ReceiptHeader) GetBlobGasPrice() []byte {
	if x != nil {
		return x.BlobGasPrice
	}
	return nil
}

type ReceiptL1Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasPrice []byte `protobuf:"bytes,1,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	GasUsed  []byte `protobuf:"bytes,2,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Fee      []byte `protobuf:"bytes,3,opt,name=Fee,proto3" json:"Fee,omitempty"`
}

func (x *ReceiptL1Extension) Reset() {
	*x = ReceiptL1Extension{}
	mi := &file_evm_block_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptL1Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptL1Extension) ProtoMessage() {}

func (x *ReceiptL1Extension) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptL1Extension.ProtoReflect.Descriptor instead.
func (*ReceiptL1Extension) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{9}
}

func (x *ReceiptL1Extension) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *ReceiptL1Extension) GetGasUsed() []byte {
	if x != nil {
		return x.GasUsed
	}
	return nil
}

func (x *ReceiptL1Extension) GetFee() []byte {
	if x != nil {
		return x.Fee
	}
	return nil
}

type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptHeader *ReceiptHeader `protobuf:"bytes,1,opt,name=ReceiptHeader,proto3" json:"ReceiptHeader,omitempty"`
	Logs          []*Log         `protobuf:"bytes,2,rep,name=Logs,proto3" json:"Logs,omitempty"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	mi := &file_evm_block_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{10}
}

func (x *Receipt) GetReceiptHeader() *ReceiptHeader {
	if x != nil {
		return x.ReceiptHeader
	}
	return nil
}

func (x *Receipt) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type Opcode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Opcode) Reset() {
	*x = Opcode{}
	mi := &file_evm_block_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Opcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Opcode) ProtoMessage() {}

func (x *Opcode) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Opcode.ProtoReflect.Descriptor instead.
func (*Opcode) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{11}
}

func (x *Opcode) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Opcode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CaptureStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   []byte       `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To     []byte       `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Create bool         `protobuf:"varint,3,opt,name=Create,proto3" json:"Create,omitempty"`
	Input  []byte       `protobuf:"bytes,4,opt,name=Input,proto3" json:"Input,omitempty"`
	Gas    uint64       `protobuf:"varint,5,opt,name=Gas,proto3" json:"Gas,omitempty"`
	Value  []byte       `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`
	ToCode *AddressCode `protobuf:"bytes,7,opt,name=ToCode,proto3" json:"ToCode,omitempty"`
	// The 'tokenId' is designed for use with the TRON blockchain.
	// If the 'Value' field is not 0 and the 'TokenId' field is null, it indicates a TRX transfer.
	// If the 'Value' field is not 0 and the 'TokenId' field not null, it indicates a TRC10 token transfer.
	TokenId *string `protobuf:"bytes,8,opt,name=TokenId,proto3,oneof" json:"TokenId,omitempty"`
}

func (x *CaptureStart) Reset() {
	*x = CaptureStart{}
	mi := &file_evm_block_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStart) ProtoMessage() {}

func (x *CaptureStart) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStart.ProtoReflect.Descriptor instead.
func (*CaptureStart) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{12}
}

func (x *CaptureStart) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CaptureStart) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CaptureStart) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *CaptureStart) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CaptureStart) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *CaptureStart) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CaptureStart) GetToCode() *AddressCode {
	if x != nil {
		return x.ToCode
	}
	return nil
}

func (x *CaptureStart) GetTokenId() string {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return ""
}

type CaptureEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  []byte `protobuf:"bytes,1,opt,name=Output,proto3" json:"Output,omitempty"`
	GasUsed uint64 `protobuf:"varint,2,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *CaptureEnd) Reset() {
	*x = CaptureEnd{}
	mi := &file_evm_block_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureEnd) ProtoMessage() {}

func (x *CaptureEnd) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureEnd.ProtoReflect.Descriptor instead.
func (*CaptureEnd) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{13}
}

func (x *CaptureEnd) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *CaptureEnd) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *CaptureEnd) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerAddress []byte `protobuf:"bytes,1,opt,name=CallerAddress,proto3" json:"CallerAddress,omitempty"`
	Caller        []byte `protobuf:"bytes,2,opt,name=Caller,proto3" json:"Caller,omitempty"`
	Address       []byte `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	CodeAddr      []byte `protobuf:"bytes,4,opt,name=CodeAddr,proto3" json:"CodeAddr,omitempty"`
	Input         []byte `protobuf:"bytes,5,opt,name=Input,proto3" json:"Input,omitempty"`
	Value         []byte `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	mi := &file_evm_block_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{14}
}

func (x *Contract) GetCallerAddress() []byte {
	if x != nil {
		return x.CallerAddress
	}
	return nil
}

func (x *Contract) GetCaller() []byte {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *Contract) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Contract) GetCodeAddr() []byte {
	if x != nil {
		return x.CodeAddr
	}
	return nil
}

func (x *Contract) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Contract) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type CaptureFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pc       uint64    `protobuf:"varint,1,opt,name=Pc,proto3" json:"Pc,omitempty"`
	Opcode   *Opcode   `protobuf:"bytes,2,opt,name=Opcode,proto3" json:"Opcode,omitempty"`
	Gas      uint64    `protobuf:"varint,3,opt,name=Gas,proto3" json:"Gas,omitempty"`
	Cost     uint64    `protobuf:"varint,4,opt,name=Cost,proto3" json:"Cost,omitempty"`
	Memory   []byte    `protobuf:"bytes,5,opt,name=Memory,proto3" json:"Memory,omitempty"`
	Depth    uint64    `protobuf:"varint,6,opt,name=Depth,proto3" json:"Depth,omitempty"`
	Stack    [][]byte  `protobuf:"bytes,7,rep,name=Stack,proto3" json:"Stack,omitempty"`
	Contract *Contract `protobuf:"bytes,8,opt,name=Contract,proto3" json:"Contract,omitempty"`
	Error    string    `protobuf:"bytes,9,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *CaptureFault) Reset() {
	*x = CaptureFault{}
	mi := &file_evm_block_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureFault) ProtoMessage() {}

func (x *CaptureFault) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureFault.ProtoReflect.Descriptor instead.
func (*CaptureFault) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{15}
}

func (x *CaptureFault) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *CaptureFault) GetOpcode() *Opcode {
	if x != nil {
		return x.Opcode
	}
	return nil
}

func (x *CaptureFault) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *CaptureFault) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CaptureFault) GetMemory() []byte {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *CaptureFault) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *CaptureFault) GetStack() [][]byte {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *CaptureFault) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *CaptureFault) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CaptureEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opcode  *Opcode      `protobuf:"bytes,1,opt,name=Opcode,proto3" json:"Opcode,omitempty"`
	From    []byte       `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To      []byte       `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	Input   []byte       `protobuf:"bytes,4,opt,name=Input,proto3" json:"Input,omitempty"`
	Gas     uint64       `protobuf:"varint,5,opt,name=Gas,proto3" json:"Gas,omitempty"`
	Value   []byte       `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`
	ToCode  *AddressCode `protobuf:"bytes,7,opt,name=ToCode,proto3" json:"ToCode,omitempty"`
	TokenId *string      `protobuf:"bytes,8,opt,name=TokenId,proto3,oneof" json:"TokenId,omitempty"`
}

func (x *CaptureEnter) Reset() {
	*x = CaptureEnter{}
	mi := &file_evm_block_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureEnter) ProtoMessage() {}

func (x *CaptureEnter) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureEnter.ProtoReflect.Descriptor instead.
func (*CaptureEnter) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{16}
}

func (x *CaptureEnter) GetOpcode() *Opcode {
	if x != nil {
		return x.Opcode
	}
	return nil
}

func (x *CaptureEnter) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CaptureEnter) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CaptureEnter) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CaptureEnter) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *CaptureEnter) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CaptureEnter) GetToCode() *AddressCode {
	if x != nil {
		return x.ToCode
	}
	return nil
}

func (x *CaptureEnter) GetTokenId() string {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return ""
}

type CaptureExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  []byte `protobuf:"bytes,1,opt,name=Output,proto3" json:"Output,omitempty"`
	GasUsed uint64 `protobuf:"varint,2,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *CaptureExit) Reset() {
	*x = CaptureExit{}
	mi := &file_evm_block_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureExit) ProtoMessage() {}

func (x *CaptureExit) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureExit.ProtoReflect.Descriptor instead.
func (*CaptureExit) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{17}
}

func (x *CaptureExit) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *CaptureExit) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *CaptureExit) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CaptureStateHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterIndex uint32  `protobuf:"varint,1,opt,name=EnterIndex,proto3" json:"EnterIndex,omitempty"`
	ExitIndex  uint32  `protobuf:"varint,2,opt,name=ExitIndex,proto3" json:"ExitIndex,omitempty"`
	Pc         uint64  `protobuf:"varint,3,opt,name=Pc,proto3" json:"Pc,omitempty"`
	Opcode     *Opcode `protobuf:"bytes,4,opt,name=Opcode,proto3" json:"Opcode,omitempty"`
	Gas        uint64  `protobuf:"varint,5,opt,name=Gas,proto3" json:"Gas,omitempty"`
	Cost       uint64  `protobuf:"varint,6,opt,name=Cost,proto3" json:"Cost,omitempty"`
	RData      []byte  `protobuf:"bytes,7,opt,name=RData,proto3" json:"RData,omitempty"`
	Depth      uint64  `protobuf:"varint,8,opt,name=Depth,proto3" json:"Depth,omitempty"`
	Error      string  `protobuf:"bytes,9,opt,name=Error,proto3" json:"Error,omitempty"`
	Index      *uint32 `protobuf:"varint,10,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *CaptureStateHeader) Reset() {
	*x = CaptureStateHeader{}
	mi := &file_evm_block_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureStateHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStateHeader) ProtoMessage() {}

func (x *CaptureStateHeader) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStateHeader.ProtoReflect.Descriptor instead.
func (*CaptureStateHeader) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{18}
}

func (x *CaptureStateHeader) GetEnterIndex() uint32 {
	if x != nil {
		return x.EnterIndex
	}
	return 0
}

func (x *CaptureStateHeader) GetExitIndex() uint32 {
	if x != nil {
		return x.ExitIndex
	}
	return 0
}

func (x *CaptureStateHeader) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *CaptureStateHeader) GetOpcode() *Opcode {
	if x != nil {
		return x.Opcode
	}
	return nil
}

func (x *CaptureStateHeader) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *CaptureStateHeader) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CaptureStateHeader) GetRData() []byte {
	if x != nil {
		return x.RData
	}
	return nil
}

func (x *CaptureStateHeader) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *CaptureStateHeader) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CaptureStateHeader) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type CaptureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureStateHeader *CaptureStateHeader `protobuf:"bytes,1,opt,name=CaptureStateHeader,proto3" json:"CaptureStateHeader,omitempty"`
	Log                *Log                `protobuf:"bytes,2,opt,name=Log,proto3" json:"Log,omitempty"`
	Store              *Store              `protobuf:"bytes,3,opt,name=Store,proto3" json:"Store,omitempty"`
}

func (x *CaptureState) Reset() {
	*x = CaptureState{}
	mi := &file_evm_block_message_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureState) ProtoMessage() {}

func (x *CaptureState) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureState.ProtoReflect.Descriptor instead.
func (*CaptureState) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{19}
}

func (x *CaptureState) GetCaptureStateHeader() *CaptureStateHeader {
	if x != nil {
		return x.CaptureStateHeader
	}
	return nil
}

func (x *CaptureState) GetLog() *Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *CaptureState) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         uint32          `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Depth         uint32          `protobuf:"varint,2,opt,name=Depth,proto3" json:"Depth,omitempty"`
	EnterIndex    uint32          `protobuf:"varint,3,opt,name=EnterIndex,proto3" json:"EnterIndex,omitempty"`
	ExitIndex     uint32          `protobuf:"varint,4,opt,name=ExitIndex,proto3" json:"ExitIndex,omitempty"`
	CallerIndex   int32           `protobuf:"varint,5,opt,name=CallerIndex,proto3" json:"CallerIndex,omitempty"`
	CaptureEnter  *CaptureEnter   `protobuf:"bytes,6,opt,name=CaptureEnter,proto3" json:"CaptureEnter,omitempty"`
	CaptureExit   *CaptureExit    `protobuf:"bytes,7,opt,name=CaptureExit,proto3" json:"CaptureExit,omitempty"`
	CaptureStates []*CaptureState `protobuf:"bytes,8,rep,name=CaptureStates,proto3" json:"CaptureStates,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	mi := &file_evm_block_message_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{20}
}

func (x *Call) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Call) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Call) GetEnterIndex() uint32 {
	if x != nil {
		return x.EnterIndex
	}
	return 0
}

func (x *Call) GetExitIndex() uint32 {
	if x != nil {
		return x.ExitIndex
	}
	return 0
}

func (x *Call) GetCallerIndex() int32 {
	if x != nil {
		return x.CallerIndex
	}
	return 0
}

func (x *Call) GetCaptureEnter() *CaptureEnter {
	if x != nil {
		return x.CaptureEnter
	}
	return nil
}

func (x *Call) GetCaptureExit() *CaptureExit {
	if x != nil {
		return x.CaptureExit
	}
	return nil
}

func (x *Call) GetCaptureStates() []*CaptureState {
	if x != nil {
		return x.CaptureStates
	}
	return nil
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls                []*Call                `protobuf:"bytes,1,rep,name=Calls,proto3" json:"Calls,omitempty"`
	CaptureStart         *CaptureStart          `protobuf:"bytes,2,opt,name=CaptureStart,proto3" json:"CaptureStart,omitempty"`
	CaptureEnd           *CaptureEnd            `protobuf:"bytes,3,opt,name=CaptureEnd,proto3" json:"CaptureEnd,omitempty"`
	CaptureFault         *CaptureFault          `protobuf:"bytes,4,opt,name=CaptureFault,proto3" json:"CaptureFault,omitempty"`
	CaptureStates        []*CaptureState        `protobuf:"bytes,5,rep,name=CaptureStates,proto3" json:"CaptureStates,omitempty"`
	TokenBalanceUpdates  []*TokenBalanceUpdate  `protobuf:"bytes,6,rep,name=TokenBalanceUpdates,proto3" json:"TokenBalanceUpdates,omitempty"`
	NativeBalanceUpdates []*NativeBalanceUpdate `protobuf:"bytes,7,rep,name=NativeBalanceUpdates,proto3" json:"NativeBalanceUpdates,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	mi := &file_evm_block_message_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{21}
}

func (x *Trace) GetCalls() []*Call {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *Trace) GetCaptureStart() *CaptureStart {
	if x != nil {
		return x.CaptureStart
	}
	return nil
}

func (x *Trace) GetCaptureEnd() *CaptureEnd {
	if x != nil {
		return x.CaptureEnd
	}
	return nil
}

func (x *Trace) GetCaptureFault() *CaptureFault {
	if x != nil {
		return x.CaptureFault
	}
	return nil
}

func (x *Trace) GetCaptureStates() []*CaptureState {
	if x != nil {
		return x.CaptureStates
	}
	return nil
}

func (x *Trace) GetTokenBalanceUpdates() []*TokenBalanceUpdate {
	if x != nil {
		return x.TokenBalanceUpdates
	}
	return nil
}

func (x *Trace) GetNativeBalanceUpdates() []*NativeBalanceUpdate {
	if x != nil {
		return x.NativeBalanceUpdates
	}
	return nil
}

type AccessTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	StorageKeys [][]byte `protobuf:"bytes,2,rep,name=StorageKeys,proto3" json:"StorageKeys,omitempty"`
}

func (x *AccessTuple) Reset() {
	*x = AccessTuple{}
	mi := &file_evm_block_message_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTuple) ProtoMessage() {}

func (x *AccessTuple) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTuple.ProtoReflect.Descriptor instead.
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{22}
}

func (x *AccessTuple) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessTuple) GetStorageKeys() [][]byte {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type TransactionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      uint64         `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Hash       []byte         `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Gas        uint64         `protobuf:"varint,3,opt,name=Gas,proto3" json:"Gas,omitempty"`
	Value      []byte         `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Data       []byte         `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	Nonce      uint64         `protobuf:"varint,6,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	ChainId    []byte         `protobuf:"bytes,7,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	Cost       []byte         `protobuf:"bytes,8,opt,name=Cost,proto3" json:"Cost,omitempty"`
	GasFeeCap  []byte         `protobuf:"bytes,9,opt,name=GasFeeCap,proto3" json:"GasFeeCap,omitempty"`
	GasPrice   []byte         `protobuf:"bytes,10,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	GasTipCap  []byte         `protobuf:"bytes,11,opt,name=GasTipCap,proto3" json:"GasTipCap,omitempty"`
	Protected  bool           `protobuf:"varint,12,opt,name=Protected,proto3" json:"Protected,omitempty"`
	Type       uint32         `protobuf:"varint,13,opt,name=Type,proto3" json:"Type,omitempty"`
	To         []byte         `protobuf:"bytes,14,opt,name=To,proto3" json:"To,omitempty"`
	From       []byte         `protobuf:"bytes,15,opt,name=From,proto3" json:"From,omitempty"`
	ToCode     *AddressCode   `protobuf:"bytes,16,opt,name=ToCode,proto3" json:"ToCode,omitempty"`
	AccessList []*AccessTuple `protobuf:"bytes,17,rep,name=AccessList,proto3" json:"AccessList,omitempty"`
	// only applicable for arbitrum
	GasL1 *uint64 `protobuf:"varint,18,opt,name=GasL1,proto3,oneof" json:"GasL1,omitempty"`
	// only applicable for optimism
	IsSystemTx *bool `protobuf:"varint,19,opt,name=IsSystemTx,proto3,oneof" json:"IsSystemTx,omitempty"`
	// only applicable for optimism
	EffectiveNonce *uint64 `protobuf:"varint,20,opt,name=EffectiveNonce,proto3,oneof" json:"EffectiveNonce,omitempty"`
	// only applicable for optimism
	SourceHash []byte `protobuf:"bytes,21,opt,name=SourceHash,proto3,oneof" json:"SourceHash,omitempty"`
	// only applicable to broadcasted
	Time *uint64 `protobuf:"varint,22,opt,name=Time,proto3,oneof" json:"Time,omitempty"`
	// for Txn Type: 3 (EIP-4844)
	Blob *Blob `protobuf:"bytes,23,opt,name=Blob,proto3,oneof" json:"Blob,omitempty"`
}

func (x *TransactionHeader) Reset() {
	*x = TransactionHeader{}
	mi := &file_evm_block_message_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHeader) ProtoMessage() {}

func (x *TransactionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHeader.ProtoReflect.Descriptor instead.
func (*TransactionHeader) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{23}
}

func (x *TransactionHeader) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransactionHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TransactionHeader) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *TransactionHeader) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TransactionHeader) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionHeader) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransactionHeader) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *TransactionHeader) GetCost() []byte {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *TransactionHeader) GetGasFeeCap() []byte {
	if x != nil {
		return x.GasFeeCap
	}
	return nil
}

func (x *TransactionHeader) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *TransactionHeader) GetGasTipCap() []byte {
	if x != nil {
		return x.GasTipCap
	}
	return nil
}

func (x *TransactionHeader) GetProtected() bool {
	if x != nil {
		return x.Protected
	}
	return false
}

func (x *TransactionHeader) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TransactionHeader) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TransactionHeader) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TransactionHeader) GetToCode() *AddressCode {
	if x != nil {
		return x.ToCode
	}
	return nil
}

func (x *TransactionHeader) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *TransactionHeader) GetGasL1() uint64 {
	if x != nil && x.GasL1 != nil {
		return *x.GasL1
	}
	return 0
}

func (x *TransactionHeader) GetIsSystemTx() bool {
	if x != nil && x.IsSystemTx != nil {
		return *x.IsSystemTx
	}
	return false
}

func (x *TransactionHeader) GetEffectiveNonce() uint64 {
	if x != nil && x.EffectiveNonce != nil {
		return *x.EffectiveNonce
	}
	return 0
}

func (x *TransactionHeader) GetSourceHash() []byte {
	if x != nil {
		return x.SourceHash
	}
	return nil
}

func (x *TransactionHeader) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *TransactionHeader) GetBlob() *Blob {
	if x != nil {
		return x.Blob
	}
	return nil
}

type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes        [][]byte `protobuf:"bytes,1,rep,name=Hashes,proto3" json:"Hashes,omitempty"`
	Proofs        [][]byte `protobuf:"bytes,2,rep,name=Proofs,proto3" json:"Proofs,omitempty"`
	Commitments   [][]byte `protobuf:"bytes,3,rep,name=Commitments,proto3" json:"Commitments,omitempty"`
	BlobGas       uint64   `protobuf:"varint,4,opt,name=BlobGas,proto3" json:"BlobGas,omitempty"`
	BlobGasFeeCap []byte   `protobuf:"bytes,5,opt,name=BlobGasFeeCap,proto3" json:"BlobGasFeeCap,omitempty"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	mi := &file_evm_block_message_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{24}
}

func (x *Blob) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *Blob) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *Blob) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *Blob) GetBlobGas() uint64 {
	if x != nil {
		return x.BlobGas
	}
	return 0
}

func (x *Blob) GetBlobGasFeeCap() []byte {
	if x != nil {
		return x.BlobGasFeeCap
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Fungible    bool   `protobuf:"varint,2,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	Decimals    int32  `protobuf:"varint,3,opt,name=Decimals,proto3" json:"Decimals,omitempty"`
	TotalSupply []byte `protobuf:"bytes,4,opt,name=TotalSupply,proto3" json:"TotalSupply,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_evm_block_message_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{25}
}

func (x *Token) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Token) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *Token) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Token) GetTotalSupply() []byte {
	if x != nil {
		return x.TotalSupply
	}
	return nil
}

type TokenBalanceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       *Token `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Address     []byte `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Id          []byte `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	PostBalance []byte `protobuf:"bytes,4,opt,name=PostBalance,proto3" json:"PostBalance,omitempty"`
}

func (x *TokenBalanceUpdate) Reset() {
	*x = TokenBalanceUpdate{}
	mi := &file_evm_block_message_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBalanceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalanceUpdate) ProtoMessage() {}

func (x *TokenBalanceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalanceUpdate.ProtoReflect.Descriptor instead.
func (*TokenBalanceUpdate) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{26}
}

func (x *TokenBalanceUpdate) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenBalanceUpdate) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TokenBalanceUpdate) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TokenBalanceUpdate) GetPostBalance() []byte {
	if x != nil {
		return x.PostBalance
	}
	return nil
}

type NativeBalanceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address                 []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PreBalance              []byte `protobuf:"bytes,2,opt,name=PreBalance,proto3" json:"PreBalance,omitempty"`
	PostBalance             []byte `protobuf:"bytes,3,opt,name=PostBalance,proto3" json:"PostBalance,omitempty"`
	BalanceChangeReasonCode int32  `protobuf:"varint,4,opt,name=BalanceChangeReasonCode,proto3" json:"BalanceChangeReasonCode,omitempty"`
}

func (x *NativeBalanceUpdate) Reset() {
	*x = NativeBalanceUpdate{}
	mi := &file_evm_block_message_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NativeBalanceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeBalanceUpdate) ProtoMessage() {}

func (x *NativeBalanceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeBalanceUpdate.ProtoReflect.Descriptor instead.
func (*NativeBalanceUpdate) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{27}
}

func (x *NativeBalanceUpdate) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NativeBalanceUpdate) GetPreBalance() []byte {
	if x != nil {
		return x.PreBalance
	}
	return nil
}

func (x *NativeBalanceUpdate) GetPostBalance() []byte {
	if x != nil {
		return x.PostBalance
	}
	return nil
}

func (x *NativeBalanceUpdate) GetBalanceChangeReasonCode() int32 {
	if x != nil {
		return x.BalanceChangeReasonCode
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHeader *TransactionHeader `protobuf:"bytes,1,opt,name=TransactionHeader,proto3" json:"TransactionHeader,omitempty"`
	Signature         *Signature         `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Receipt           *Receipt           `protobuf:"bytes,3,opt,name=Receipt,proto3" json:"Receipt,omitempty"`
	Trace             *Trace             `protobuf:"bytes,4,opt,name=Trace,proto3" json:"Trace,omitempty"`
	// Deprecated: Marked as deprecated in evm/block_message.proto.
	Time uint64 `protobuf:"varint,5,opt,name=Time,proto3" json:"Time,omitempty"` // only applicable to broadcasted
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_evm_block_message_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{28}
}

func (x *Transaction) GetTransactionHeader() *TransactionHeader {
	if x != nil {
		return x.TransactionHeader
	}
	return nil
}

func (x *Transaction) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction) GetReceipt() *Receipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *Transaction) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

// Deprecated: Marked as deprecated in evm/block_message.proto.
func (x *Transaction) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId []byte `protobuf:"bytes,1,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	Config  string `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	mi := &file_evm_block_message_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{29}
}

func (x *Chain) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *Chain) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type L1MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind        uint32 `protobuf:"varint,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	Poster      []byte `protobuf:"bytes,2,opt,name=Poster,proto3" json:"Poster,omitempty"`
	BlockNumber uint64 `protobuf:"varint,3,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Timestamp   uint64 `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	RequestId   []byte `protobuf:"bytes,5,opt,name=RequestId,proto3,oneof" json:"RequestId,omitempty"`
	L1BaseFee   []byte `protobuf:"bytes,6,opt,name=L1BaseFee,proto3,oneof" json:"L1BaseFee,omitempty"`
}

func (x *L1MessageInfo) Reset() {
	*x = L1MessageInfo{}
	mi := &file_evm_block_message_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L1MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1MessageInfo) ProtoMessage() {}

func (x *L1MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1MessageInfo.ProtoReflect.Descriptor instead.
func (*L1MessageInfo) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{30}
}

func (x *L1MessageInfo) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *L1MessageInfo) GetPoster() []byte {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *L1MessageInfo) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *L1MessageInfo) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *L1MessageInfo) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *L1MessageInfo) GetL1BaseFee() []byte {
	if x != nil {
		return x.L1BaseFee
	}
	return nil
}

type BlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain         *Chain         `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Header        *BlockHeader   `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	Result        *BlockResult   `protobuf:"bytes,3,opt,name=Result,proto3" json:"Result,omitempty"`
	Uncles        []*BlockHeader `protobuf:"bytes,4,rep,name=Uncles,proto3" json:"Uncles,omitempty"`
	Transactions  []*Transaction `protobuf:"bytes,5,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	L1Header      *BlockHeader   `protobuf:"bytes,6,opt,name=L1Header,proto3,oneof" json:"L1Header,omitempty"`
	L1MessageInfo *L1MessageInfo `protobuf:"bytes,7,opt,name=L1MessageInfo,proto3,oneof" json:"L1MessageInfo,omitempty"`
}

func (x *BlockMessage) Reset() {
	*x = BlockMessage{}
	mi := &file_evm_block_message_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMessage) ProtoMessage() {}

func (x *BlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_evm_block_message_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMessage.ProtoReflect.Descriptor instead.
func (*BlockMessage) Descriptor() ([]byte, []int) {
	return file_evm_block_message_proto_rawDescGZIP(), []int{31}
}

func (x *BlockMessage) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *BlockMessage) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockMessage) GetResult() *BlockResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BlockMessage) GetUncles() []*BlockHeader {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (x *BlockMessage) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BlockMessage) GetL1Header() *BlockHeader {
	if x != nil {
		return x.L1Header
	}
	return nil
}

func (x *BlockMessage) GetL1MessageInfo() *L1MessageInfo {
	if x != nil {
		return x.L1MessageInfo
	}
	return nil
}

var File_evm_block_message_proto protoreflect.FileDescriptor

var file_evm_block_message_proto_rawDesc = []byte{
	0x0a, 0x17, 0x65, 0x76, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x76, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x53, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65, 0x64, 0x22, 0xb0, 0x05, 0x0a, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69,
	0x78, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d,
	0x69, 0x78, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65,
	0x46, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52,
	0x0d, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x0b, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x4c, 0x31, 0x46, 0x65, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x22, 0x37, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x47, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x47, 0x61, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x52, 0x12, 0x0c, 0x0a, 0x01, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x56, 0x12,
	0x0c, 0x0a, 0x01, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x53, 0x22, 0x31, 0x0a,
	0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x22, 0xd4, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x49, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x49,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x49,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x69, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x35,
	0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x4c, 0x6f, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x22, 0x53, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c, 0x6f,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x02, 0x4c, 0x31, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x31, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x4c, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x11, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x11, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x47,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x42, 0x6c, 0x6f,
	0x62, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x03, 0x52, 0x0c, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x4c, 0x31, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x5c, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x31, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x46, 0x65, 0x65, 0x22, 0x73,
	0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04,
	0x4c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x4c,
	0x6f, 0x67, 0x73, 0x22, 0x30, 0x0a, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x61, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x47, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x54, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x54, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x54,
	0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x80, 0x02, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x50, 0x63, 0x12, 0x2c, 0x0a, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x47, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x47,
	0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xfc, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x4f, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x47, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x47, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x54, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x54, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9d, 0x02, 0x0a, 0x12, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x78, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x0e, 0x0a, 0x02, 0x50, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x50, 0x63, 0x12,
	0x2c, 0x0a, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x47, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x47, 0x61, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x52, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x12, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x03, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x4c,
	0x6f, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xd1, 0x02,
	0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x78, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78,
	0x69, 0x74, 0x52, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x22, 0xd8, 0x03, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x6d, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x6e, 0x64, 0x52, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x3e, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x13, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x13, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x14, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xfe, 0x05, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x47, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x73, 0x46, 0x65,
	0x65, 0x43, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x47, 0x61, 0x73, 0x46,
	0x65, 0x65, 0x43, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43, 0x61, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x47, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43, 0x61, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x54,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x31, 0x0a, 0x06, 0x54, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x54, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x47, 0x61, 0x73, 0x4c, 0x31, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x47, 0x61, 0x73, 0x4c, 0x31, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x78, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62,
	0x48, 0x05, 0x52, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x47, 0x61, 0x73, 0x4c, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x42, 0x6c, 0x6f, 0x62, 0x22, 0x98, 0x01, 0x0a, 0x04, 0x42, 0x6c, 0x6f,
	0x62, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x46, 0x65, 0x65,
	0x43, 0x61, 0x70, 0x22, 0x7b, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x22, 0x8b, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xab,
	0x01, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x02, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x4c, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x21, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4c, 0x31, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x4c, 0x31, 0x42, 0x61, 0x73, 0x65, 0x46,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4c, 0x31, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65,
	0x65, 0x22, 0xb4, 0x03, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x31, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x55, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0d, 0x4c, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x0d, 0x4c, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4c, 0x31,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4c, 0x31, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0x0a, 0x12, 0x69, 0x6f, 0x2e, 0x62,
	0x69, 0x74, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x42, 0x0a,
	0x45, 0x76, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_evm_block_message_proto_rawDescOnce sync.Once
	file_evm_block_message_proto_rawDescData = file_evm_block_message_proto_rawDesc
)

func file_evm_block_message_proto_rawDescGZIP() []byte {
	file_evm_block_message_proto_rawDescOnce.Do(func() {
		file_evm_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_evm_block_message_proto_rawDescData)
	})
	return file_evm_block_message_proto_rawDescData
}

var file_evm_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_evm_block_message_proto_goTypes = []any{
	(*AddressCode)(nil),         // 0: evm_messages.AddressCode
	(*BlockHeader)(nil),         // 1: evm_messages.BlockHeader
	(*BlockResult)(nil),         // 2: evm_messages.BlockResult
	(*Signature)(nil),           // 3: evm_messages.Signature
	(*Topic)(nil),               // 4: evm_messages.Topic
	(*LogHeader)(nil),           // 5: evm_messages.LogHeader
	(*Log)(nil),                 // 6: evm_messages.Log
	(*Store)(nil),               // 7: evm_messages.Store
	(*ReceiptHeader)(nil),       // 8: evm_messages.ReceiptHeader
	(*ReceiptL1Extension)(nil),  // 9: evm_messages.ReceiptL1Extension
	(*Receipt)(nil),             // 10: evm_messages.Receipt
	(*Opcode)(nil),              // 11: evm_messages.Opcode
	(*CaptureStart)(nil),        // 12: evm_messages.CaptureStart
	(*CaptureEnd)(nil),          // 13: evm_messages.CaptureEnd
	(*Contract)(nil),            // 14: evm_messages.Contract
	(*CaptureFault)(nil),        // 15: evm_messages.CaptureFault
	(*CaptureEnter)(nil),        // 16: evm_messages.CaptureEnter
	(*CaptureExit)(nil),         // 17: evm_messages.CaptureExit
	(*CaptureStateHeader)(nil),  // 18: evm_messages.CaptureStateHeader
	(*CaptureState)(nil),        // 19: evm_messages.CaptureState
	(*Call)(nil),                // 20: evm_messages.Call
	(*Trace)(nil),               // 21: evm_messages.Trace
	(*AccessTuple)(nil),         // 22: evm_messages.AccessTuple
	(*TransactionHeader)(nil),   // 23: evm_messages.TransactionHeader
	(*Blob)(nil),                // 24: evm_messages.Blob
	(*Token)(nil),               // 25: evm_messages.Token
	(*TokenBalanceUpdate)(nil),  // 26: evm_messages.TokenBalanceUpdate
	(*NativeBalanceUpdate)(nil), // 27: evm_messages.NativeBalanceUpdate
	(*Transaction)(nil),         // 28: evm_messages.Transaction
	(*Chain)(nil),               // 29: evm_messages.Chain
	(*L1MessageInfo)(nil),       // 30: evm_messages.L1MessageInfo
	(*BlockMessage)(nil),        // 31: evm_messages.BlockMessage
}
var file_evm_block_message_proto_depIdxs = []int32{
	0,  // 0: evm_messages.LogHeader.AddressCode:type_name -> evm_messages.AddressCode
	5,  // 1: evm_messages.Log.LogHeader:type_name -> evm_messages.LogHeader
	4,  // 2: evm_messages.Log.Topics:type_name -> evm_messages.Topic
	0,  // 3: evm_messages.ReceiptHeader.ContractAddressCode:type_name -> evm_messages.AddressCode
	9,  // 4: evm_messages.ReceiptHeader.L1:type_name -> evm_messages.ReceiptL1Extension
	8,  // 5: evm_messages.Receipt.ReceiptHeader:type_name -> evm_messages.ReceiptHeader
	6,  // 6: evm_messages.Receipt.Logs:type_name -> evm_messages.Log
	0,  // 7: evm_messages.CaptureStart.ToCode:type_name -> evm_messages.AddressCode
	11, // 8: evm_messages.CaptureFault.Opcode:type_name -> evm_messages.Opcode
	14, // 9: evm_messages.CaptureFault.Contract:type_name -> evm_messages.Contract
	11, // 10: evm_messages.CaptureEnter.Opcode:type_name -> evm_messages.Opcode
	0,  // 11: evm_messages.CaptureEnter.ToCode:type_name -> evm_messages.AddressCode
	11, // 12: evm_messages.CaptureStateHeader.Opcode:type_name -> evm_messages.Opcode
	18, // 13: evm_messages.CaptureState.CaptureStateHeader:type_name -> evm_messages.CaptureStateHeader
	6,  // 14: evm_messages.CaptureState.Log:type_name -> evm_messages.Log
	7,  // 15: evm_messages.CaptureState.Store:type_name -> evm_messages.Store
	16, // 16: evm_messages.Call.CaptureEnter:type_name -> evm_messages.CaptureEnter
	17, // 17: evm_messages.Call.CaptureExit:type_name -> evm_messages.CaptureExit
	19, // 18: evm_messages.Call.CaptureStates:type_name -> evm_messages.CaptureState
	20, // 19: evm_messages.Trace.Calls:type_name -> evm_messages.Call
	12, // 20: evm_messages.Trace.CaptureStart:type_name -> evm_messages.CaptureStart
	13, // 21: evm_messages.Trace.CaptureEnd:type_name -> evm_messages.CaptureEnd
	15, // 22: evm_messages.Trace.CaptureFault:type_name -> evm_messages.CaptureFault
	19, // 23: evm_messages.Trace.CaptureStates:type_name -> evm_messages.CaptureState
	26, // 24: evm_messages.Trace.TokenBalanceUpdates:type_name -> evm_messages.TokenBalanceUpdate
	27, // 25: evm_messages.Trace.NativeBalanceUpdates:type_name -> evm_messages.NativeBalanceUpdate
	0,  // 26: evm_messages.TransactionHeader.ToCode:type_name -> evm_messages.AddressCode
	22, // 27: evm_messages.TransactionHeader.AccessList:type_name -> evm_messages.AccessTuple
	24, // 28: evm_messages.TransactionHeader.Blob:type_name -> evm_messages.Blob
	25, // 29: evm_messages.TokenBalanceUpdate.Token:type_name -> evm_messages.Token
	23, // 30: evm_messages.Transaction.TransactionHeader:type_name -> evm_messages.TransactionHeader
	3,  // 31: evm_messages.Transaction.Signature:type_name -> evm_messages.Signature
	10, // 32: evm_messages.Transaction.Receipt:type_name -> evm_messages.Receipt
	21, // 33: evm_messages.Transaction.Trace:type_name -> evm_messages.Trace
	29, // 34: evm_messages.BlockMessage.Chain:type_name -> evm_messages.Chain
	1,  // 35: evm_messages.BlockMessage.Header:type_name -> evm_messages.BlockHeader
	2,  // 36: evm_messages.BlockMessage.Result:type_name -> evm_messages.BlockResult
	1,  // 37: evm_messages.BlockMessage.Uncles:type_name -> evm_messages.BlockHeader
	28, // 38: evm_messages.BlockMessage.Transactions:type_name -> evm_messages.Transaction
	1,  // 39: evm_messages.BlockMessage.L1Header:type_name -> evm_messages.BlockHeader
	30, // 40: evm_messages.BlockMessage.L1MessageInfo:type_name -> evm_messages.L1MessageInfo
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_evm_block_message_proto_init() }
func file_evm_block_message_proto_init() {
	if File_evm_block_message_proto != nil {
		return
	}
	file_evm_block_message_proto_msgTypes[1].OneofWrappers = []any{}
	file_evm_block_message_proto_msgTypes[5].OneofWrappers = []any{}
	file_evm_block_message_proto_msgTypes[8].OneofWrappers = []any{}
	file_evm_block_message_proto_msgTypes[12].OneofWrappers = []any{}
	file_evm_block_message_proto_msgTypes[16].OneofWrappers = []any{}
	file_evm_block_message_proto_msgTypes[18].OneofWrappers = []any{}
	file_evm_block_message_proto_msgTypes[23].OneofWrappers = []any{}
	file_evm_block_message_proto_msgTypes[30].OneofWrappers = []any{}
	file_evm_block_message_proto_msgTypes[31].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evm_block_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_evm_block_message_proto_goTypes,
		DependencyIndexes: file_evm_block_message_proto_depIdxs,
		MessageInfos:      file_evm_block_message_proto_msgTypes,
	}.Build()
	File_evm_block_message_proto = out.File
	file_evm_block_message_proto_rawDesc = nil
	file_evm_block_message_proto_goTypes = nil
	file_evm_block_message_proto_depIdxs = nil
}
