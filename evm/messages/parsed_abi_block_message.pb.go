// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: evm/parsed_abi_block_message.proto

package evm_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParsedAbiSignature_SignatureType int32

const (
	ParsedAbiSignature_FUNCTION    ParsedAbiSignature_SignatureType = 0
	ParsedAbiSignature_CONSTRUCTOR ParsedAbiSignature_SignatureType = 1
	ParsedAbiSignature_FALLBACK    ParsedAbiSignature_SignatureType = 2
	ParsedAbiSignature_RECEIVE     ParsedAbiSignature_SignatureType = 3
	ParsedAbiSignature_LOG         ParsedAbiSignature_SignatureType = 4
)

// Enum value maps for ParsedAbiSignature_SignatureType.
var (
	ParsedAbiSignature_SignatureType_name = map[int32]string{
		0: "FUNCTION",
		1: "CONSTRUCTOR",
		2: "FALLBACK",
		3: "RECEIVE",
		4: "LOG",
	}
	ParsedAbiSignature_SignatureType_value = map[string]int32{
		"FUNCTION":    0,
		"CONSTRUCTOR": 1,
		"FALLBACK":    2,
		"RECEIVE":     3,
		"LOG":         4,
	}
)

func (x ParsedAbiSignature_SignatureType) Enum() *ParsedAbiSignature_SignatureType {
	p := new(ParsedAbiSignature_SignatureType)
	*p = x
	return p
}

func (x ParsedAbiSignature_SignatureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParsedAbiSignature_SignatureType) Descriptor() protoreflect.EnumDescriptor {
	return file_evm_parsed_abi_block_message_proto_enumTypes[0].Descriptor()
}

func (ParsedAbiSignature_SignatureType) Type() protoreflect.EnumType {
	return &file_evm_parsed_abi_block_message_proto_enumTypes[0]
}

func (x ParsedAbiSignature_SignatureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParsedAbiSignature_SignatureType.Descriptor instead.
func (ParsedAbiSignature_SignatureType) EnumDescriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{3, 0}
}

type ArgumentValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	IsHashed bool   `protobuf:"varint,2,opt,name=IsHashed,proto3" json:"IsHashed,omitempty"`
	// Types that are assignable to Value:
	//
	//	*ArgumentValue_String_
	//	*ArgumentValue_Bytes
	//	*ArgumentValue_UInt
	//	*ArgumentValue_Int
	//	*ArgumentValue_Bool
	//	*ArgumentValue_Array
	//	*ArgumentValue_Tuple
	Value isArgumentValue_Value `protobuf_oneof:"Value"`
}

func (x *ArgumentValue) Reset() {
	*x = ArgumentValue{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentValue) ProtoMessage() {}

func (x *ArgumentValue) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentValue.ProtoReflect.Descriptor instead.
func (*ArgumentValue) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *ArgumentValue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArgumentValue) GetIsHashed() bool {
	if x != nil {
		return x.IsHashed
	}
	return false
}

func (m *ArgumentValue) GetValue() isArgumentValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ArgumentValue) GetString_() string {
	if x, ok := x.GetValue().(*ArgumentValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ArgumentValue) GetBytes() []byte {
	if x, ok := x.GetValue().(*ArgumentValue_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *ArgumentValue) GetUInt() uint64 {
	if x, ok := x.GetValue().(*ArgumentValue_UInt); ok {
		return x.UInt
	}
	return 0
}

func (x *ArgumentValue) GetInt() int64 {
	if x, ok := x.GetValue().(*ArgumentValue_Int); ok {
		return x.Int
	}
	return 0
}

func (x *ArgumentValue) GetBool() bool {
	if x, ok := x.GetValue().(*ArgumentValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *ArgumentValue) GetArray() *ArgumentArray {
	if x, ok := x.GetValue().(*ArgumentValue_Array); ok {
		return x.Array
	}
	return nil
}

func (x *ArgumentValue) GetTuple() *ArgumentTuple {
	if x, ok := x.GetValue().(*ArgumentValue_Tuple); ok {
		return x.Tuple
	}
	return nil
}

type isArgumentValue_Value interface {
	isArgumentValue_Value()
}

type ArgumentValue_String_ struct {
	String_ string `protobuf:"bytes,3,opt,name=String,proto3,oneof"`
}

type ArgumentValue_Bytes struct {
	Bytes []byte `protobuf:"bytes,4,opt,name=Bytes,proto3,oneof"`
}

type ArgumentValue_UInt struct {
	UInt uint64 `protobuf:"varint,5,opt,name=UInt,proto3,oneof"`
}

type ArgumentValue_Int struct {
	Int int64 `protobuf:"varint,6,opt,name=Int,proto3,oneof"`
}

type ArgumentValue_Bool struct {
	Bool bool `protobuf:"varint,7,opt,name=Bool,proto3,oneof"`
}

type ArgumentValue_Array struct {
	Array *ArgumentArray `protobuf:"bytes,10,opt,name=Array,proto3,oneof"`
}

type ArgumentValue_Tuple struct {
	Tuple *ArgumentTuple `protobuf:"bytes,11,opt,name=Tuple,proto3,oneof"`
}

func (*ArgumentValue_String_) isArgumentValue_Value() {}

func (*ArgumentValue_Bytes) isArgumentValue_Value() {}

func (*ArgumentValue_UInt) isArgumentValue_Value() {}

func (*ArgumentValue_Int) isArgumentValue_Value() {}

func (*ArgumentValue_Bool) isArgumentValue_Value() {}

func (*ArgumentValue_Array) isArgumentValue_Value() {}

func (*ArgumentValue_Tuple) isArgumentValue_Value() {}

type ArgumentArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*ArgumentValue `protobuf:"bytes,1,rep,name=Elements,proto3" json:"Elements,omitempty"`
}

func (x *ArgumentArray) Reset() {
	*x = ArgumentArray{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentArray) ProtoMessage() {}

func (x *ArgumentArray) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentArray.ProtoReflect.Descriptor instead.
func (*ArgumentArray) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{1}
}

func (x *ArgumentArray) GetElements() []*ArgumentValue {
	if x != nil {
		return x.Elements
	}
	return nil
}

type ArgumentTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string           `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Elements []*ArgumentValue `protobuf:"bytes,2,rep,name=Elements,proto3" json:"Elements,omitempty"`
}

func (x *ArgumentTuple) Reset() {
	*x = ArgumentTuple{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentTuple) ProtoMessage() {}

func (x *ArgumentTuple) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentTuple.ProtoReflect.Descriptor instead.
func (*ArgumentTuple) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *ArgumentTuple) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArgumentTuple) GetElements() []*ArgumentValue {
	if x != nil {
		return x.Elements
	}
	return nil
}

type ParsedAbiSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parsed        bool                             `protobuf:"varint,1,opt,name=Parsed,proto3" json:"Parsed,omitempty"`
	Name          string                           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Signature     string                           `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Abi           string                           `protobuf:"bytes,4,opt,name=Abi,proto3" json:"Abi,omitempty"`
	SignatureHash []byte                           `protobuf:"bytes,5,opt,name=SignatureHash,proto3" json:"SignatureHash,omitempty"`
	Type          ParsedAbiSignature_SignatureType `protobuf:"varint,6,opt,name=Type,proto3,enum=evm_messages.ParsedAbiSignature_SignatureType" json:"Type,omitempty"`
}

func (x *ParsedAbiSignature) Reset() {
	*x = ParsedAbiSignature{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAbiSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAbiSignature) ProtoMessage() {}

func (x *ParsedAbiSignature) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAbiSignature.ProtoReflect.Descriptor instead.
func (*ParsedAbiSignature) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *ParsedAbiSignature) GetParsed() bool {
	if x != nil {
		return x.Parsed
	}
	return false
}

func (x *ParsedAbiSignature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParsedAbiSignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ParsedAbiSignature) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *ParsedAbiSignature) GetSignatureHash() []byte {
	if x != nil {
		return x.SignatureHash
	}
	return nil
}

func (x *ParsedAbiSignature) GetType() ParsedAbiSignature_SignatureType {
	if x != nil {
		return x.Type
	}
	return ParsedAbiSignature_FUNCTION
}

type ParsedArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Indexed bool           `protobuf:"varint,2,opt,name=Indexed,proto3" json:"Indexed,omitempty"`
	Value   *ArgumentValue `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ParsedArgument) Reset() {
	*x = ParsedArgument{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedArgument) ProtoMessage() {}

func (x *ParsedArgument) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedArgument.ProtoReflect.Descriptor instead.
func (*ParsedArgument) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{4}
}

func (x *ParsedArgument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParsedArgument) GetIndexed() bool {
	if x != nil {
		return x.Indexed
	}
	return false
}

func (x *ParsedArgument) GetValue() *ArgumentValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type ParsedAbiLogHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             uint32              `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	EnterIndex        uint32              `protobuf:"varint,2,opt,name=EnterIndex,proto3" json:"EnterIndex,omitempty"`
	ExitIndex         uint32              `protobuf:"varint,3,opt,name=ExitIndex,proto3" json:"ExitIndex,omitempty"`
	LogAfterCallIndex uint32              `protobuf:"varint,4,opt,name=LogAfterCallIndex,proto3" json:"LogAfterCallIndex,omitempty"`
	Pc                uint64              `protobuf:"varint,5,opt,name=Pc,proto3" json:"Pc,omitempty"`
	SmartContract     []byte              `protobuf:"bytes,6,opt,name=SmartContract,proto3" json:"SmartContract,omitempty"`
	Signature         *ParsedAbiSignature `protobuf:"bytes,7,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *ParsedAbiLogHeader) Reset() {
	*x = ParsedAbiLogHeader{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAbiLogHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAbiLogHeader) ProtoMessage() {}

func (x *ParsedAbiLogHeader) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAbiLogHeader.ProtoReflect.Descriptor instead.
func (*ParsedAbiLogHeader) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{5}
}

func (x *ParsedAbiLogHeader) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ParsedAbiLogHeader) GetEnterIndex() uint32 {
	if x != nil {
		return x.EnterIndex
	}
	return 0
}

func (x *ParsedAbiLogHeader) GetExitIndex() uint32 {
	if x != nil {
		return x.ExitIndex
	}
	return 0
}

func (x *ParsedAbiLogHeader) GetLogAfterCallIndex() uint32 {
	if x != nil {
		return x.LogAfterCallIndex
	}
	return 0
}

func (x *ParsedAbiLogHeader) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *ParsedAbiLogHeader) GetSmartContract() []byte {
	if x != nil {
		return x.SmartContract
	}
	return nil
}

func (x *ParsedAbiLogHeader) GetSignature() *ParsedAbiSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ParsedAbiLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *LogHeader          `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Topics    []*Topic            `protobuf:"bytes,2,rep,name=Topics,proto3" json:"Topics,omitempty"`
	Parsed    *ParsedAbiLogHeader `protobuf:"bytes,3,opt,name=Parsed,proto3" json:"Parsed,omitempty"`
	Arguments []*ParsedArgument   `protobuf:"bytes,4,rep,name=Arguments,proto3" json:"Arguments,omitempty"`
}

func (x *ParsedAbiLog) Reset() {
	*x = ParsedAbiLog{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAbiLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAbiLog) ProtoMessage() {}

func (x *ParsedAbiLog) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAbiLog.ProtoReflect.Descriptor instead.
func (*ParsedAbiLog) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{6}
}

func (x *ParsedAbiLog) GetHeader() *LogHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ParsedAbiLog) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ParsedAbiLog) GetParsed() *ParsedAbiLogHeader {
	if x != nil {
		return x.Parsed
	}
	return nil
}

func (x *ParsedAbiLog) GetArguments() []*ParsedArgument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type ParsedStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterIndex           uint32 `protobuf:"varint,1,opt,name=EnterIndex,proto3" json:"EnterIndex,omitempty"`
	ExitIndex            uint32 `protobuf:"varint,2,opt,name=ExitIndex,proto3" json:"ExitIndex,omitempty"`
	ChangeAfterCallIndex uint32 `protobuf:"varint,3,opt,name=ChangeAfterCallIndex,proto3" json:"ChangeAfterCallIndex,omitempty"`
	Pc                   uint64 `protobuf:"varint,4,opt,name=Pc,proto3" json:"Pc,omitempty"`
	Address              []byte `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
	Location             []byte `protobuf:"bytes,6,opt,name=Location,proto3" json:"Location,omitempty"`
	Value                []byte `protobuf:"bytes,7,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ParsedStateChange) Reset() {
	*x = ParsedStateChange{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedStateChange) ProtoMessage() {}

func (x *ParsedStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedStateChange.ProtoReflect.Descriptor instead.
func (*ParsedStateChange) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{7}
}

func (x *ParsedStateChange) GetEnterIndex() uint32 {
	if x != nil {
		return x.EnterIndex
	}
	return 0
}

func (x *ParsedStateChange) GetExitIndex() uint32 {
	if x != nil {
		return x.ExitIndex
	}
	return 0
}

func (x *ParsedStateChange) GetChangeAfterCallIndex() uint32 {
	if x != nil {
		return x.ChangeAfterCallIndex
	}
	return 0
}

func (x *ParsedStateChange) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *ParsedStateChange) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ParsedStateChange) GetLocation() []byte {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ParsedStateChange) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ParsedAbiCallHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         uint32              `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Depth         uint32              `protobuf:"varint,2,opt,name=Depth,proto3" json:"Depth,omitempty"`
	EnterIndex    uint32              `protobuf:"varint,3,opt,name=EnterIndex,proto3" json:"EnterIndex,omitempty"`
	ExitIndex     uint32              `protobuf:"varint,4,opt,name=ExitIndex,proto3" json:"ExitIndex,omitempty"`
	CallerIndex   int32               `protobuf:"varint,5,opt,name=CallerIndex,proto3" json:"CallerIndex,omitempty"`
	InternalCalls uint32              `protobuf:"varint,6,opt,name=InternalCalls,proto3" json:"InternalCalls,omitempty"`
	CallPath      []uint32            `protobuf:"varint,7,rep,packed,name=CallPath,proto3" json:"CallPath,omitempty"`
	From          []byte              `protobuf:"bytes,8,opt,name=From,proto3" json:"From,omitempty"`
	To            []byte              `protobuf:"bytes,9,opt,name=To,proto3" json:"To,omitempty"`
	Create        bool                `protobuf:"varint,10,opt,name=Create,proto3" json:"Create,omitempty"`
	Input         []byte              `protobuf:"bytes,11,opt,name=Input,proto3" json:"Input,omitempty"`
	Gas           uint64              `protobuf:"varint,12,opt,name=Gas,proto3" json:"Gas,omitempty"`
	Value         []byte              `protobuf:"bytes,13,opt,name=Value,proto3" json:"Value,omitempty"`
	Output        []byte              `protobuf:"bytes,14,opt,name=Output,proto3" json:"Output,omitempty"`
	GasUsed       uint64              `protobuf:"varint,15,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Error         string              `protobuf:"bytes,16,opt,name=Error,proto3" json:"Error,omitempty"`
	Opcode        *Opcode             `protobuf:"bytes,17,opt,name=Opcode,proto3" json:"Opcode,omitempty"`
	SelfDestruct  bool                `protobuf:"varint,18,opt,name=SelfDestruct,proto3" json:"SelfDestruct,omitempty"`
	Delegated     bool                `protobuf:"varint,19,opt,name=Delegated,proto3" json:"Delegated,omitempty"`
	Success       bool                `protobuf:"varint,20,opt,name=Success,proto3" json:"Success,omitempty"`
	Reverted      bool                `protobuf:"varint,21,opt,name=Reverted,proto3" json:"Reverted,omitempty"`
	Signature     *ParsedAbiSignature `protobuf:"bytes,22,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *ParsedAbiCallHeader) Reset() {
	*x = ParsedAbiCallHeader{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAbiCallHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAbiCallHeader) ProtoMessage() {}

func (x *ParsedAbiCallHeader) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAbiCallHeader.ProtoReflect.Descriptor instead.
func (*ParsedAbiCallHeader) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{8}
}

func (x *ParsedAbiCallHeader) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ParsedAbiCallHeader) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ParsedAbiCallHeader) GetEnterIndex() uint32 {
	if x != nil {
		return x.EnterIndex
	}
	return 0
}

func (x *ParsedAbiCallHeader) GetExitIndex() uint32 {
	if x != nil {
		return x.ExitIndex
	}
	return 0
}

func (x *ParsedAbiCallHeader) GetCallerIndex() int32 {
	if x != nil {
		return x.CallerIndex
	}
	return 0
}

func (x *ParsedAbiCallHeader) GetInternalCalls() uint32 {
	if x != nil {
		return x.InternalCalls
	}
	return 0
}

func (x *ParsedAbiCallHeader) GetCallPath() []uint32 {
	if x != nil {
		return x.CallPath
	}
	return nil
}

func (x *ParsedAbiCallHeader) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ParsedAbiCallHeader) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ParsedAbiCallHeader) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *ParsedAbiCallHeader) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ParsedAbiCallHeader) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *ParsedAbiCallHeader) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ParsedAbiCallHeader) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ParsedAbiCallHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ParsedAbiCallHeader) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ParsedAbiCallHeader) GetOpcode() *Opcode {
	if x != nil {
		return x.Opcode
	}
	return nil
}

func (x *ParsedAbiCallHeader) GetSelfDestruct() bool {
	if x != nil {
		return x.SelfDestruct
	}
	return false
}

func (x *ParsedAbiCallHeader) GetDelegated() bool {
	if x != nil {
		return x.Delegated
	}
	return false
}

func (x *ParsedAbiCallHeader) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ParsedAbiCallHeader) GetReverted() bool {
	if x != nil {
		return x.Reverted
	}
	return false
}

func (x *ParsedAbiCallHeader) GetSignature() *ParsedAbiSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ParsedAbiCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *ParsedAbiCallHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Arguments    []*ParsedArgument    `protobuf:"bytes,2,rep,name=Arguments,proto3" json:"Arguments,omitempty"`
	ReturnValues []*ParsedArgument    `protobuf:"bytes,3,rep,name=ReturnValues,proto3" json:"ReturnValues,omitempty"`
	Logs         []*ParsedAbiLog      `protobuf:"bytes,4,rep,name=Logs,proto3" json:"Logs,omitempty"`
	StateChanges []*ParsedStateChange `protobuf:"bytes,5,rep,name=StateChanges,proto3" json:"StateChanges,omitempty"`
}

func (x *ParsedAbiCall) Reset() {
	*x = ParsedAbiCall{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAbiCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAbiCall) ProtoMessage() {}

func (x *ParsedAbiCall) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAbiCall.ProtoReflect.Descriptor instead.
func (*ParsedAbiCall) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{9}
}

func (x *ParsedAbiCall) GetHeader() *ParsedAbiCallHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ParsedAbiCall) GetArguments() []*ParsedArgument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ParsedAbiCall) GetReturnValues() []*ParsedArgument {
	if x != nil {
		return x.ReturnValues
	}
	return nil
}

func (x *ParsedAbiCall) GetLogs() []*ParsedAbiLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ParsedAbiCall) GetStateChanges() []*ParsedStateChange {
	if x != nil {
		return x.StateChanges
	}
	return nil
}

type TransactionFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderFee         []byte `protobuf:"bytes,1,opt,name=SenderFee,proto3" json:"SenderFee,omitempty"`
	PriorityFeePerGas []byte `protobuf:"bytes,2,opt,name=PriorityFeePerGas,proto3" json:"PriorityFeePerGas,omitempty"`
	EffectiveGasPrice []byte `protobuf:"bytes,3,opt,name=EffectiveGasPrice,proto3" json:"EffectiveGasPrice,omitempty"`
	GasRefund         uint64 `protobuf:"varint,4,opt,name=GasRefund,proto3" json:"GasRefund,omitempty"`
	Burnt             []byte `protobuf:"bytes,5,opt,name=Burnt,proto3" json:"Burnt,omitempty"`
	Savings           []byte `protobuf:"bytes,6,opt,name=Savings,proto3" json:"Savings,omitempty"`
	MinerReward       []byte `protobuf:"bytes,7,opt,name=MinerReward,proto3" json:"MinerReward,omitempty"`
}

func (x *TransactionFee) Reset() {
	*x = TransactionFee{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFee) ProtoMessage() {}

func (x *TransactionFee) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFee.ProtoReflect.Descriptor instead.
func (*TransactionFee) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{10}
}

func (x *TransactionFee) GetSenderFee() []byte {
	if x != nil {
		return x.SenderFee
	}
	return nil
}

func (x *TransactionFee) GetPriorityFeePerGas() []byte {
	if x != nil {
		return x.PriorityFeePerGas
	}
	return nil
}

func (x *TransactionFee) GetEffectiveGasPrice() []byte {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return nil
}

func (x *TransactionFee) GetGasRefund() uint64 {
	if x != nil {
		return x.GasRefund
	}
	return 0
}

func (x *TransactionFee) GetBurnt() []byte {
	if x != nil {
		return x.Burnt
	}
	return nil
}

func (x *TransactionFee) GetSavings() []byte {
	if x != nil {
		return x.Savings
	}
	return nil
}

func (x *TransactionFee) GetMinerReward() []byte {
	if x != nil {
		return x.MinerReward
	}
	return nil
}

type ParsedAbiTransactionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	EndError   string `protobuf:"bytes,2,opt,name=EndError,proto3" json:"EndError,omitempty"`
	FaultError string `protobuf:"bytes,3,opt,name=FaultError,proto3" json:"FaultError,omitempty"`
}

func (x *ParsedAbiTransactionStatus) Reset() {
	*x = ParsedAbiTransactionStatus{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAbiTransactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAbiTransactionStatus) ProtoMessage() {}

func (x *ParsedAbiTransactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAbiTransactionStatus.ProtoReflect.Descriptor instead.
func (*ParsedAbiTransactionStatus) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{11}
}

func (x *ParsedAbiTransactionStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ParsedAbiTransactionStatus) GetEndError() string {
	if x != nil {
		return x.EndError
	}
	return ""
}

func (x *ParsedAbiTransactionStatus) GetFaultError() string {
	if x != nil {
		return x.FaultError
	}
	return ""
}

type ParsedAbiTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHeader *TransactionHeader          `protobuf:"bytes,1,opt,name=TransactionHeader,proto3" json:"TransactionHeader,omitempty"`
	ReceiptHeader     *ReceiptHeader              `protobuf:"bytes,2,opt,name=ReceiptHeader,proto3" json:"ReceiptHeader,omitempty"`
	TransactionFee    *TransactionFee             `protobuf:"bytes,3,opt,name=TransactionFee,proto3" json:"TransactionFee,omitempty"`
	TransactionStatus *ParsedAbiTransactionStatus `protobuf:"bytes,4,opt,name=TransactionStatus,proto3" json:"TransactionStatus,omitempty"`
	Calls             []*ParsedAbiCall            `protobuf:"bytes,5,rep,name=Calls,proto3" json:"Calls,omitempty"`
	Signature         *Signature                  `protobuf:"bytes,6,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *ParsedAbiTransaction) Reset() {
	*x = ParsedAbiTransaction{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAbiTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAbiTransaction) ProtoMessage() {}

func (x *ParsedAbiTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAbiTransaction.ProtoReflect.Descriptor instead.
func (*ParsedAbiTransaction) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{12}
}

func (x *ParsedAbiTransaction) GetTransactionHeader() *TransactionHeader {
	if x != nil {
		return x.TransactionHeader
	}
	return nil
}

func (x *ParsedAbiTransaction) GetReceiptHeader() *ReceiptHeader {
	if x != nil {
		return x.ReceiptHeader
	}
	return nil
}

func (x *ParsedAbiTransaction) GetTransactionFee() *TransactionFee {
	if x != nil {
		return x.TransactionFee
	}
	return nil
}

func (x *ParsedAbiTransaction) GetTransactionStatus() *ParsedAbiTransactionStatus {
	if x != nil {
		return x.TransactionStatus
	}
	return nil
}

func (x *ParsedAbiTransaction) GetCalls() []*ParsedAbiCall {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *ParsedAbiTransaction) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MinerReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       []byte `protobuf:"bytes,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Static      []byte `protobuf:"bytes,2,opt,name=Static,proto3" json:"Static,omitempty"`
	Dynamic     []byte `protobuf:"bytes,3,opt,name=Dynamic,proto3" json:"Dynamic,omitempty"`
	TxFees      []byte `protobuf:"bytes,4,opt,name=TxFees,proto3" json:"TxFees,omitempty"`
	BurntFees   []byte `protobuf:"bytes,5,opt,name=BurntFees,proto3" json:"BurntFees,omitempty"`
	Uncle       []byte `protobuf:"bytes,6,opt,name=Uncle,proto3" json:"Uncle,omitempty"`
	Beneficiary []byte `protobuf:"bytes,7,opt,name=Beneficiary,proto3,oneof" json:"Beneficiary,omitempty"`
}

func (x *MinerReward) Reset() {
	*x = MinerReward{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MinerReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerReward) ProtoMessage() {}

func (x *MinerReward) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerReward.ProtoReflect.Descriptor instead.
func (*MinerReward) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{13}
}

func (x *MinerReward) GetTotal() []byte {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *MinerReward) GetStatic() []byte {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *MinerReward) GetDynamic() []byte {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *MinerReward) GetTxFees() []byte {
	if x != nil {
		return x.TxFees
	}
	return nil
}

func (x *MinerReward) GetBurntFees() []byte {
	if x != nil {
		return x.BurntFees
	}
	return nil
}

func (x *MinerReward) GetUncle() []byte {
	if x != nil {
		return x.Uncle
	}
	return nil
}

func (x *MinerReward) GetBeneficiary() []byte {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

type ParsedAbiBlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        *Chain                  `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Header       *BlockHeader            `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	Uncles       []*BlockHeader          `protobuf:"bytes,3,rep,name=Uncles,proto3" json:"Uncles,omitempty"`
	Reward       *MinerReward            `protobuf:"bytes,4,opt,name=Reward,proto3" json:"Reward,omitempty"`
	UncleRewards []*MinerReward          `protobuf:"bytes,5,rep,name=UncleRewards,proto3" json:"UncleRewards,omitempty"`
	Transactions []*ParsedAbiTransaction `protobuf:"bytes,6,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	L1Header     *BlockHeader            `protobuf:"bytes,7,opt,name=L1Header,proto3,oneof" json:"L1Header,omitempty"`
	ExtraRewards []*MinerReward          `protobuf:"bytes,8,rep,name=ExtraRewards,proto3" json:"ExtraRewards,omitempty"`
}

func (x *ParsedAbiBlockMessage) Reset() {
	*x = ParsedAbiBlockMessage{}
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAbiBlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAbiBlockMessage) ProtoMessage() {}

func (x *ParsedAbiBlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_evm_parsed_abi_block_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAbiBlockMessage.ProtoReflect.Descriptor instead.
func (*ParsedAbiBlockMessage) Descriptor() ([]byte, []int) {
	return file_evm_parsed_abi_block_message_proto_rawDescGZIP(), []int{14}
}

func (x *ParsedAbiBlockMessage) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *ParsedAbiBlockMessage) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ParsedAbiBlockMessage) GetUncles() []*BlockHeader {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (x *ParsedAbiBlockMessage) GetReward() *MinerReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ParsedAbiBlockMessage) GetUncleRewards() []*MinerReward {
	if x != nil {
		return x.UncleRewards
	}
	return nil
}

func (x *ParsedAbiBlockMessage) GetTransactions() []*ParsedAbiTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ParsedAbiBlockMessage) GetL1Header() *BlockHeader {
	if x != nil {
		return x.L1Header
	}
	return nil
}

func (x *ParsedAbiBlockMessage) GetExtraRewards() []*MinerReward {
	if x != nil {
		return x.ExtraRewards
	}
	return nil
}

var File_evm_parsed_abi_block_message_proto protoreflect.FileDescriptor

var file_evm_parsed_abi_block_message_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x76, 0x6d, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x69,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0x17, 0x65, 0x76, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x02, 0x0a, 0x0d,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x04, 0x55, 0x49, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x04, 0x55, 0x49, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x49, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x42, 0x6f, 0x6f,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x33, 0x0a, 0x05, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x48, 0x0a, 0x0d, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0d,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x12, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41,
	0x62, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x62, 0x69, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x04, 0x22, 0x71, 0x0a, 0x0e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c,
	0x02, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x4c, 0x6f, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x78, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x45, 0x78, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4c, 0x6f, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x50, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3e, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe2, 0x01,
	0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x4c, 0x6f, 0x67, 0x12, 0x2f,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x64, 0x41, 0x62, 0x69, 0x4c, 0x6f, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x6d, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x78, 0x69,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x50, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x05, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x41, 0x62, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78,
	0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45,
	0x78, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x54, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x47, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x47, 0x61, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41,
	0x62, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x43, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72,
	0x47, 0x61, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x47, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x42, 0x75, 0x72, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x22, 0x72, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb0, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64,
	0x41, 0x62, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x6d, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x0b, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x46, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x54, 0x78, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x75, 0x72, 0x6e,
	0x74, 0x46, 0x65, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x75, 0x72,
	0x6e, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x22, 0xea, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62,
	0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x55,
	0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0c, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x46, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x62, 0x69, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x4c, 0x31, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_evm_parsed_abi_block_message_proto_rawDescOnce sync.Once
	file_evm_parsed_abi_block_message_proto_rawDescData = file_evm_parsed_abi_block_message_proto_rawDesc
)

func file_evm_parsed_abi_block_message_proto_rawDescGZIP() []byte {
	file_evm_parsed_abi_block_message_proto_rawDescOnce.Do(func() {
		file_evm_parsed_abi_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_evm_parsed_abi_block_message_proto_rawDescData)
	})
	return file_evm_parsed_abi_block_message_proto_rawDescData
}

var file_evm_parsed_abi_block_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_evm_parsed_abi_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_evm_parsed_abi_block_message_proto_goTypes = []any{
	(ParsedAbiSignature_SignatureType)(0), // 0: evm_messages.ParsedAbiSignature.SignatureType
	(*ArgumentValue)(nil),                 // 1: evm_messages.ArgumentValue
	(*ArgumentArray)(nil),                 // 2: evm_messages.ArgumentArray
	(*ArgumentTuple)(nil),                 // 3: evm_messages.ArgumentTuple
	(*ParsedAbiSignature)(nil),            // 4: evm_messages.ParsedAbiSignature
	(*ParsedArgument)(nil),                // 5: evm_messages.ParsedArgument
	(*ParsedAbiLogHeader)(nil),            // 6: evm_messages.ParsedAbiLogHeader
	(*ParsedAbiLog)(nil),                  // 7: evm_messages.ParsedAbiLog
	(*ParsedStateChange)(nil),             // 8: evm_messages.ParsedStateChange
	(*ParsedAbiCallHeader)(nil),           // 9: evm_messages.ParsedAbiCallHeader
	(*ParsedAbiCall)(nil),                 // 10: evm_messages.ParsedAbiCall
	(*TransactionFee)(nil),                // 11: evm_messages.TransactionFee
	(*ParsedAbiTransactionStatus)(nil),    // 12: evm_messages.ParsedAbiTransactionStatus
	(*ParsedAbiTransaction)(nil),          // 13: evm_messages.ParsedAbiTransaction
	(*MinerReward)(nil),                   // 14: evm_messages.MinerReward
	(*ParsedAbiBlockMessage)(nil),         // 15: evm_messages.ParsedAbiBlockMessage
	(*LogHeader)(nil),                     // 16: evm_messages.LogHeader
	(*Topic)(nil),                         // 17: evm_messages.Topic
	(*Opcode)(nil),                        // 18: evm_messages.Opcode
	(*TransactionHeader)(nil),             // 19: evm_messages.TransactionHeader
	(*ReceiptHeader)(nil),                 // 20: evm_messages.ReceiptHeader
	(*Signature)(nil),                     // 21: evm_messages.Signature
	(*Chain)(nil),                         // 22: evm_messages.Chain
	(*BlockHeader)(nil),                   // 23: evm_messages.BlockHeader
}
var file_evm_parsed_abi_block_message_proto_depIdxs = []int32{
	2,  // 0: evm_messages.ArgumentValue.Array:type_name -> evm_messages.ArgumentArray
	3,  // 1: evm_messages.ArgumentValue.Tuple:type_name -> evm_messages.ArgumentTuple
	1,  // 2: evm_messages.ArgumentArray.Elements:type_name -> evm_messages.ArgumentValue
	1,  // 3: evm_messages.ArgumentTuple.Elements:type_name -> evm_messages.ArgumentValue
	0,  // 4: evm_messages.ParsedAbiSignature.Type:type_name -> evm_messages.ParsedAbiSignature.SignatureType
	1,  // 5: evm_messages.ParsedArgument.Value:type_name -> evm_messages.ArgumentValue
	4,  // 6: evm_messages.ParsedAbiLogHeader.Signature:type_name -> evm_messages.ParsedAbiSignature
	16, // 7: evm_messages.ParsedAbiLog.Header:type_name -> evm_messages.LogHeader
	17, // 8: evm_messages.ParsedAbiLog.Topics:type_name -> evm_messages.Topic
	6,  // 9: evm_messages.ParsedAbiLog.Parsed:type_name -> evm_messages.ParsedAbiLogHeader
	5,  // 10: evm_messages.ParsedAbiLog.Arguments:type_name -> evm_messages.ParsedArgument
	18, // 11: evm_messages.ParsedAbiCallHeader.Opcode:type_name -> evm_messages.Opcode
	4,  // 12: evm_messages.ParsedAbiCallHeader.Signature:type_name -> evm_messages.ParsedAbiSignature
	9,  // 13: evm_messages.ParsedAbiCall.Header:type_name -> evm_messages.ParsedAbiCallHeader
	5,  // 14: evm_messages.ParsedAbiCall.Arguments:type_name -> evm_messages.ParsedArgument
	5,  // 15: evm_messages.ParsedAbiCall.ReturnValues:type_name -> evm_messages.ParsedArgument
	7,  // 16: evm_messages.ParsedAbiCall.Logs:type_name -> evm_messages.ParsedAbiLog
	8,  // 17: evm_messages.ParsedAbiCall.StateChanges:type_name -> evm_messages.ParsedStateChange
	19, // 18: evm_messages.ParsedAbiTransaction.TransactionHeader:type_name -> evm_messages.TransactionHeader
	20, // 19: evm_messages.ParsedAbiTransaction.ReceiptHeader:type_name -> evm_messages.ReceiptHeader
	11, // 20: evm_messages.ParsedAbiTransaction.TransactionFee:type_name -> evm_messages.TransactionFee
	12, // 21: evm_messages.ParsedAbiTransaction.TransactionStatus:type_name -> evm_messages.ParsedAbiTransactionStatus
	10, // 22: evm_messages.ParsedAbiTransaction.Calls:type_name -> evm_messages.ParsedAbiCall
	21, // 23: evm_messages.ParsedAbiTransaction.Signature:type_name -> evm_messages.Signature
	22, // 24: evm_messages.ParsedAbiBlockMessage.Chain:type_name -> evm_messages.Chain
	23, // 25: evm_messages.ParsedAbiBlockMessage.Header:type_name -> evm_messages.BlockHeader
	23, // 26: evm_messages.ParsedAbiBlockMessage.Uncles:type_name -> evm_messages.BlockHeader
	14, // 27: evm_messages.ParsedAbiBlockMessage.Reward:type_name -> evm_messages.MinerReward
	14, // 28: evm_messages.ParsedAbiBlockMessage.UncleRewards:type_name -> evm_messages.MinerReward
	13, // 29: evm_messages.ParsedAbiBlockMessage.Transactions:type_name -> evm_messages.ParsedAbiTransaction
	23, // 30: evm_messages.ParsedAbiBlockMessage.L1Header:type_name -> evm_messages.BlockHeader
	14, // 31: evm_messages.ParsedAbiBlockMessage.ExtraRewards:type_name -> evm_messages.MinerReward
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_evm_parsed_abi_block_message_proto_init() }
func file_evm_parsed_abi_block_message_proto_init() {
	if File_evm_parsed_abi_block_message_proto != nil {
		return
	}
	file_evm_block_message_proto_init()
	file_evm_parsed_abi_block_message_proto_msgTypes[0].OneofWrappers = []any{
		(*ArgumentValue_String_)(nil),
		(*ArgumentValue_Bytes)(nil),
		(*ArgumentValue_UInt)(nil),
		(*ArgumentValue_Int)(nil),
		(*ArgumentValue_Bool)(nil),
		(*ArgumentValue_Array)(nil),
		(*ArgumentValue_Tuple)(nil),
	}
	file_evm_parsed_abi_block_message_proto_msgTypes[13].OneofWrappers = []any{}
	file_evm_parsed_abi_block_message_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evm_parsed_abi_block_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_evm_parsed_abi_block_message_proto_goTypes,
		DependencyIndexes: file_evm_parsed_abi_block_message_proto_depIdxs,
		EnumInfos:         file_evm_parsed_abi_block_message_proto_enumTypes,
		MessageInfos:      file_evm_parsed_abi_block_message_proto_msgTypes,
	}.Build()
	File_evm_parsed_abi_block_message_proto = out.File
	file_evm_parsed_abi_block_message_proto_rawDesc = nil
	file_evm_parsed_abi_block_message_proto_goTypes = nil
	file_evm_parsed_abi_block_message_proto_depIdxs = nil
}
