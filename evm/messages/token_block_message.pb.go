// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: evm/token_block_message.proto

package evm_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmartContract []byte `protobuf:"bytes,1,opt,name=SmartContract,proto3" json:"SmartContract,omitempty"`
	Delegated     bool   `protobuf:"varint,2,opt,name=Delegated,proto3" json:"Delegated,omitempty"`
	DelegatedTo   []byte `protobuf:"bytes,3,opt,name=DelegatedTo,proto3" json:"DelegatedTo,omitempty"`
	ProtocolName  string `protobuf:"bytes,4,opt,name=ProtocolName,proto3" json:"ProtocolName,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Symbol        string `protobuf:"bytes,6,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Decimals      int32  `protobuf:"varint,7,opt,name=Decimals,proto3" json:"Decimals,omitempty"`
	HasURI        bool   `protobuf:"varint,8,opt,name=HasURI,proto3" json:"HasURI,omitempty"`
	Fungible      bool   `protobuf:"varint,9,opt,name=Fungible,proto3" json:"Fungible,omitempty"`
	AssetId       string `protobuf:"bytes,10,opt,name=AssetId,proto3" json:"AssetId,omitempty"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	mi := &file_evm_token_block_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_evm_token_block_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_evm_token_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *TokenInfo) GetSmartContract() []byte {
	if x != nil {
		return x.SmartContract
	}
	return nil
}

func (x *TokenInfo) GetDelegated() bool {
	if x != nil {
		return x.Delegated
	}
	return false
}

func (x *TokenInfo) GetDelegatedTo() []byte {
	if x != nil {
		return x.DelegatedTo
	}
	return nil
}

func (x *TokenInfo) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *TokenInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenInfo) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenInfo) GetHasURI() bool {
	if x != nil {
		return x.HasURI
	}
	return false
}

func (x *TokenInfo) GetFungible() bool {
	if x != nil {
		return x.Fungible
	}
	return false
}

func (x *TokenInfo) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type TokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in evm/token_block_message.proto.
	TransactionIndex     uint64             `protobuf:"varint,1,opt,name=TransactionIndex,proto3" json:"TransactionIndex,omitempty"`
	CallIndex            uint64             `protobuf:"varint,2,opt,name=CallIndex,proto3" json:"CallIndex,omitempty"`
	LogIndex             uint64             `protobuf:"varint,3,opt,name=LogIndex,proto3" json:"LogIndex,omitempty"`
	Sender               []byte             `protobuf:"bytes,4,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Receiver             []byte             `protobuf:"bytes,5,opt,name=Receiver,proto3" json:"Receiver,omitempty"`
	Amount               []byte             `protobuf:"bytes,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Id                   []byte             `protobuf:"bytes,7,opt,name=Id,proto3" json:"Id,omitempty"`
	URI                  string             `protobuf:"bytes,8,opt,name=URI,proto3" json:"URI,omitempty"`
	Currency             *TokenInfo         `protobuf:"bytes,9,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Success              bool               `protobuf:"varint,10,opt,name=Success,proto3" json:"Success,omitempty"`
	Data                 []byte             `protobuf:"bytes,12,opt,name=Data,proto3" json:"Data,omitempty"`
	Index                uint32             `protobuf:"varint,13,opt,name=Index,proto3" json:"Index,omitempty"`
	TransactionHeader    *TransactionHeader `protobuf:"bytes,14,opt,name=TransactionHeader,proto3" json:"TransactionHeader,omitempty"`
	TransactionSignature *Signature         `protobuf:"bytes,15,opt,name=TransactionSignature,proto3" json:"TransactionSignature,omitempty"`
}

func (x *TokenTransfer) Reset() {
	*x = TokenTransfer{}
	mi := &file_evm_token_block_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransfer) ProtoMessage() {}

func (x *TokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_evm_token_block_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransfer.ProtoReflect.Descriptor instead.
func (*TokenTransfer) Descriptor() ([]byte, []int) {
	return file_evm_token_block_message_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in evm/token_block_message.proto.
func (x *TokenTransfer) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *TokenTransfer) GetCallIndex() uint64 {
	if x != nil {
		return x.CallIndex
	}
	return 0
}

func (x *TokenTransfer) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *TokenTransfer) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *TokenTransfer) GetReceiver() []byte {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *TokenTransfer) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TokenTransfer) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TokenTransfer) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *TokenTransfer) GetCurrency() *TokenInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *TokenTransfer) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TokenTransfer) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TokenTransfer) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TokenTransfer) GetTransactionHeader() *TransactionHeader {
	if x != nil {
		return x.TransactionHeader
	}
	return nil
}

func (x *TokenTransfer) GetTransactionSignature() *Signature {
	if x != nil {
		return x.TransactionSignature
	}
	return nil
}

type TransactionBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHeader    *TransactionHeader `protobuf:"bytes,1,opt,name=TransactionHeader,proto3" json:"TransactionHeader,omitempty"`
	TransactionSignature *Signature         `protobuf:"bytes,2,opt,name=TransactionSignature,proto3" json:"TransactionSignature,omitempty"`
	TokenBalances        []*TokenBalance    `protobuf:"bytes,3,rep,name=TokenBalances,proto3" json:"TokenBalances,omitempty"`
}

func (x *TransactionBalances) Reset() {
	*x = TransactionBalances{}
	mi := &file_evm_token_block_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBalances) ProtoMessage() {}

func (x *TransactionBalances) ProtoReflect() protoreflect.Message {
	mi := &file_evm_token_block_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBalances.ProtoReflect.Descriptor instead.
func (*TransactionBalances) Descriptor() ([]byte, []int) {
	return file_evm_token_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionBalances) GetTransactionHeader() *TransactionHeader {
	if x != nil {
		return x.TransactionHeader
	}
	return nil
}

func (x *TransactionBalances) GetTransactionSignature() *Signature {
	if x != nil {
		return x.TransactionSignature
	}
	return nil
}

func (x *TransactionBalances) GetTokenBalances() []*TokenBalance {
	if x != nil {
		return x.TokenBalances
	}
	return nil
}

type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address                 []byte          `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Currency                *TokenInfo      `protobuf:"bytes,2,opt,name=Currency,proto3" json:"Currency,omitempty"`
	PreBalance              []byte          `protobuf:"bytes,3,opt,name=PreBalance,proto3" json:"PreBalance,omitempty"`
	PostBalance             []byte          `protobuf:"bytes,4,opt,name=PostBalance,proto3" json:"PostBalance,omitempty"`
	BalanceChangeReasonCode int32           `protobuf:"varint,5,opt,name=BalanceChangeReasonCode,proto3" json:"BalanceChangeReasonCode,omitempty"`
	TokenOwnership          *TokenOwnership `protobuf:"bytes,6,opt,name=TokenOwnership,proto3" json:"TokenOwnership,omitempty"`
	TotalSupply             []byte          `protobuf:"bytes,7,opt,name=TotalSupply,proto3" json:"TotalSupply,omitempty"`
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	mi := &file_evm_token_block_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_evm_token_block_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_evm_token_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *TokenBalance) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TokenBalance) GetCurrency() *TokenInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *TokenBalance) GetPreBalance() []byte {
	if x != nil {
		return x.PreBalance
	}
	return nil
}

func (x *TokenBalance) GetPostBalance() []byte {
	if x != nil {
		return x.PostBalance
	}
	return nil
}

func (x *TokenBalance) GetBalanceChangeReasonCode() int32 {
	if x != nil {
		return x.BalanceChangeReasonCode
	}
	return 0
}

func (x *TokenBalance) GetTokenOwnership() *TokenOwnership {
	if x != nil {
		return x.TokenOwnership
	}
	return nil
}

func (x *TokenBalance) GetTotalSupply() []byte {
	if x != nil {
		return x.TotalSupply
	}
	return nil
}

type TokenBlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain               *Chain                 `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Header              *BlockHeader           `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	Transfers           []*TokenTransfer       `protobuf:"bytes,5,rep,name=Transfers,proto3" json:"Transfers,omitempty"`
	L1Header            *BlockHeader           `protobuf:"bytes,6,opt,name=L1Header,proto3,oneof" json:"L1Header,omitempty"`
	TransactionBalances []*TransactionBalances `protobuf:"bytes,7,rep,name=TransactionBalances,proto3" json:"TransactionBalances,omitempty"`
}

func (x *TokenBlockMessage) Reset() {
	*x = TokenBlockMessage{}
	mi := &file_evm_token_block_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBlockMessage) ProtoMessage() {}

func (x *TokenBlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_evm_token_block_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBlockMessage.ProtoReflect.Descriptor instead.
func (*TokenBlockMessage) Descriptor() ([]byte, []int) {
	return file_evm_token_block_message_proto_rawDescGZIP(), []int{4}
}

func (x *TokenBlockMessage) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *TokenBlockMessage) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TokenBlockMessage) GetTransfers() []*TokenTransfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *TokenBlockMessage) GetL1Header() *BlockHeader {
	if x != nil {
		return x.L1Header
	}
	return nil
}

func (x *TokenBlockMessage) GetTransactionBalances() []*TransactionBalances {
	if x != nil {
		return x.TransactionBalances
	}
	return nil
}

var File_evm_token_block_message_proto protoreflect.FileDescriptor

var file_evm_token_block_message_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x76, 0x6d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x17, 0x65,
	0x76, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x55, 0x52, 0x49,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x48, 0x61, 0x73, 0x55, 0x52, 0x49, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0xfc, 0x03, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x52, 0x49, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x33,
	0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4d, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x0c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50,
	0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x50, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x22, 0xca, 0x02,
	0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x31,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x08,
	0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x4c, 0x31, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_evm_token_block_message_proto_rawDescOnce sync.Once
	file_evm_token_block_message_proto_rawDescData = file_evm_token_block_message_proto_rawDesc
)

func file_evm_token_block_message_proto_rawDescGZIP() []byte {
	file_evm_token_block_message_proto_rawDescOnce.Do(func() {
		file_evm_token_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_evm_token_block_message_proto_rawDescData)
	})
	return file_evm_token_block_message_proto_rawDescData
}

var file_evm_token_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_evm_token_block_message_proto_goTypes = []any{
	(*TokenInfo)(nil),           // 0: evm_messages.TokenInfo
	(*TokenTransfer)(nil),       // 1: evm_messages.TokenTransfer
	(*TransactionBalances)(nil), // 2: evm_messages.TransactionBalances
	(*TokenBalance)(nil),        // 3: evm_messages.TokenBalance
	(*TokenBlockMessage)(nil),   // 4: evm_messages.TokenBlockMessage
	(*TransactionHeader)(nil),   // 5: evm_messages.TransactionHeader
	(*Signature)(nil),           // 6: evm_messages.Signature
	(*TokenOwnership)(nil),      // 7: evm_messages.TokenOwnership
	(*Chain)(nil),               // 8: evm_messages.Chain
	(*BlockHeader)(nil),         // 9: evm_messages.BlockHeader
}
var file_evm_token_block_message_proto_depIdxs = []int32{
	0,  // 0: evm_messages.TokenTransfer.Currency:type_name -> evm_messages.TokenInfo
	5,  // 1: evm_messages.TokenTransfer.TransactionHeader:type_name -> evm_messages.TransactionHeader
	6,  // 2: evm_messages.TokenTransfer.TransactionSignature:type_name -> evm_messages.Signature
	5,  // 3: evm_messages.TransactionBalances.TransactionHeader:type_name -> evm_messages.TransactionHeader
	6,  // 4: evm_messages.TransactionBalances.TransactionSignature:type_name -> evm_messages.Signature
	3,  // 5: evm_messages.TransactionBalances.TokenBalances:type_name -> evm_messages.TokenBalance
	0,  // 6: evm_messages.TokenBalance.Currency:type_name -> evm_messages.TokenInfo
	7,  // 7: evm_messages.TokenBalance.TokenOwnership:type_name -> evm_messages.TokenOwnership
	8,  // 8: evm_messages.TokenBlockMessage.Chain:type_name -> evm_messages.Chain
	9,  // 9: evm_messages.TokenBlockMessage.Header:type_name -> evm_messages.BlockHeader
	1,  // 10: evm_messages.TokenBlockMessage.Transfers:type_name -> evm_messages.TokenTransfer
	9,  // 11: evm_messages.TokenBlockMessage.L1Header:type_name -> evm_messages.BlockHeader
	2,  // 12: evm_messages.TokenBlockMessage.TransactionBalances:type_name -> evm_messages.TransactionBalances
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_evm_token_block_message_proto_init() }
func file_evm_token_block_message_proto_init() {
	if File_evm_token_block_message_proto != nil {
		return
	}
	file_evm_block_message_proto_init()
	file_evm_token_block_message_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evm_token_block_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_evm_token_block_message_proto_goTypes,
		DependencyIndexes: file_evm_token_block_message_proto_depIdxs,
		MessageInfos:      file_evm_token_block_message_proto_msgTypes,
	}.Build()
	File_evm_token_block_message_proto = out.File
	file_evm_token_block_message_proto_rawDesc = nil
	file_evm_token_block_message_proto_goTypes = nil
	file_evm_token_block_message_proto_depIdxs = nil
}
