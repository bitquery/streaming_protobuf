// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: evm/dex_block_message.proto

package evm_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmartContract        []byte       `protobuf:"bytes,1,opt,name=SmartContract,proto3" json:"SmartContract,omitempty"`
	Delegated            bool         `protobuf:"varint,2,opt,name=Delegated,proto3" json:"Delegated,omitempty"`
	DelegatedTo          []byte       `protobuf:"bytes,3,opt,name=DelegatedTo,proto3" json:"DelegatedTo,omitempty"`
	OwnerAddress         []byte       `protobuf:"bytes,4,opt,name=OwnerAddress,proto3" json:"OwnerAddress,omitempty"`
	FeeRecipient         []byte       `protobuf:"bytes,5,opt,name=FeeRecipient,proto3" json:"FeeRecipient,omitempty"`
	ProtocolName         string       `protobuf:"bytes,6,opt,name=ProtocolName,proto3" json:"ProtocolName,omitempty"`
	ProtocolFamily       string       `protobuf:"bytes,7,opt,name=ProtocolFamily,proto3" json:"ProtocolFamily,omitempty"`
	ProtocolVersion      string       `protobuf:"bytes,8,opt,name=ProtocolVersion,proto3" json:"ProtocolVersion,omitempty"`
	Pair                 *TokenInfo   `protobuf:"bytes,9,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Currencies           []*TokenInfo `protobuf:"bytes,10,rep,name=Currencies,proto3" json:"Currencies,omitempty"`
	UnderlyingCurrencies []*TokenInfo `protobuf:"bytes,11,rep,name=UnderlyingCurrencies,proto3" json:"UnderlyingCurrencies,omitempty"`
}

func (x *DexInfo) Reset() {
	*x = DexInfo{}
	mi := &file_evm_dex_block_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexInfo) ProtoMessage() {}

func (x *DexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_evm_dex_block_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexInfo.ProtoReflect.Descriptor instead.
func (*DexInfo) Descriptor() ([]byte, []int) {
	return file_evm_dex_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *DexInfo) GetSmartContract() []byte {
	if x != nil {
		return x.SmartContract
	}
	return nil
}

func (x *DexInfo) GetDelegated() bool {
	if x != nil {
		return x.Delegated
	}
	return false
}

func (x *DexInfo) GetDelegatedTo() []byte {
	if x != nil {
		return x.DelegatedTo
	}
	return nil
}

func (x *DexInfo) GetOwnerAddress() []byte {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

func (x *DexInfo) GetFeeRecipient() []byte {
	if x != nil {
		return x.FeeRecipient
	}
	return nil
}

func (x *DexInfo) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *DexInfo) GetProtocolFamily() string {
	if x != nil {
		return x.ProtocolFamily
	}
	return ""
}

func (x *DexInfo) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *DexInfo) GetPair() *TokenInfo {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *DexInfo) GetCurrencies() []*TokenInfo {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *DexInfo) GetUnderlyingCurrencies() []*TokenInfo {
	if x != nil {
		return x.UnderlyingCurrencies
	}
	return nil
}

type TradeAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency *TokenInfo `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Amount   []byte     `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Id       []byte     `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	URI      string     `protobuf:"bytes,4,opt,name=URI,proto3" json:"URI,omitempty"`
	Data     []byte     `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *TradeAsset) Reset() {
	*x = TradeAsset{}
	mi := &file_evm_dex_block_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAsset) ProtoMessage() {}

func (x *TradeAsset) ProtoReflect() protoreflect.Message {
	mi := &file_evm_dex_block_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAsset.ProtoReflect.Descriptor instead.
func (*TradeAsset) Descriptor() ([]byte, []int) {
	return file_evm_dex_block_message_proto_rawDescGZIP(), []int{1}
}

func (x *TradeAsset) GetCurrency() *TokenInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *TradeAsset) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TradeAsset) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TradeAsset) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *TradeAsset) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TradeSide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seller  []byte        `protobuf:"bytes,1,opt,name=Seller,proto3" json:"Seller,omitempty"`
	Buyer   []byte        `protobuf:"bytes,2,opt,name=Buyer,proto3" json:"Buyer,omitempty"`
	OrderId []byte        `protobuf:"bytes,3,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	Assets  []*TradeAsset `protobuf:"bytes,4,rep,name=Assets,proto3" json:"Assets,omitempty"`
}

func (x *TradeSide) Reset() {
	*x = TradeSide{}
	mi := &file_evm_dex_block_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeSide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSide) ProtoMessage() {}

func (x *TradeSide) ProtoReflect() protoreflect.Message {
	mi := &file_evm_dex_block_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSide.ProtoReflect.Descriptor instead.
func (*TradeSide) Descriptor() ([]byte, []int) {
	return file_evm_dex_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *TradeSide) GetSeller() []byte {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *TradeSide) GetBuyer() []byte {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *TradeSide) GetOrderId() []byte {
	if x != nil {
		return x.OrderId
	}
	return nil
}

func (x *TradeSide) GetAssets() []*TradeAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type TradeFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency  *TokenInfo `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Amount    []byte     `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Id        []byte     `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Payer     []byte     `protobuf:"bytes,4,opt,name=Payer,proto3" json:"Payer,omitempty"`
	Recipient []byte     `protobuf:"bytes,5,opt,name=Recipient,proto3" json:"Recipient,omitempty"`
}

func (x *TradeFee) Reset() {
	*x = TradeFee{}
	mi := &file_evm_dex_block_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeFee) ProtoMessage() {}

func (x *TradeFee) ProtoReflect() protoreflect.Message {
	mi := &file_evm_dex_block_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeFee.ProtoReflect.Descriptor instead.
func (*TradeFee) Descriptor() ([]byte, []int) {
	return file_evm_dex_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *TradeFee) GetCurrency() *TokenInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *TradeFee) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TradeFee) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TradeFee) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *TradeFee) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

type DexTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in evm/dex_block_message.proto.
	TransactionIndex     uint64             `protobuf:"varint,1,opt,name=TransactionIndex,proto3" json:"TransactionIndex,omitempty"`
	CallIndex            uint64             `protobuf:"varint,2,opt,name=CallIndex,proto3" json:"CallIndex,omitempty"`
	LogIndex             uint64             `protobuf:"varint,3,opt,name=LogIndex,proto3" json:"LogIndex,omitempty"`
	HasLog               bool               `protobuf:"varint,4,opt,name=HasLog,proto3" json:"HasLog,omitempty"`
	Dex                  *DexInfo           `protobuf:"bytes,5,opt,name=Dex,proto3" json:"Dex,omitempty"`
	Buy                  *TradeSide         `protobuf:"bytes,6,opt,name=Buy,proto3" json:"Buy,omitempty"`
	Sell                 *TradeSide         `protobuf:"bytes,7,opt,name=Sell,proto3" json:"Sell,omitempty"`
	Sender               []byte             `protobuf:"bytes,8,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Success              bool               `protobuf:"varint,9,opt,name=Success,proto3" json:"Success,omitempty"`
	Fees                 []*TradeFee        `protobuf:"bytes,10,rep,name=Fees,proto3" json:"Fees,omitempty"`
	Index                uint32             `protobuf:"varint,11,opt,name=Index,proto3" json:"Index,omitempty"`
	TransactionHeader    *TransactionHeader `protobuf:"bytes,12,opt,name=TransactionHeader,proto3" json:"TransactionHeader,omitempty"`
	TransactionSignature *Signature         `protobuf:"bytes,13,opt,name=TransactionSignature,proto3" json:"TransactionSignature,omitempty"`
}

func (x *DexTrade) Reset() {
	*x = DexTrade{}
	mi := &file_evm_dex_block_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexTrade) ProtoMessage() {}

func (x *DexTrade) ProtoReflect() protoreflect.Message {
	mi := &file_evm_dex_block_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexTrade.ProtoReflect.Descriptor instead.
func (*DexTrade) Descriptor() ([]byte, []int) {
	return file_evm_dex_block_message_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in evm/dex_block_message.proto.
func (x *DexTrade) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *DexTrade) GetCallIndex() uint64 {
	if x != nil {
		return x.CallIndex
	}
	return 0
}

func (x *DexTrade) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DexTrade) GetHasLog() bool {
	if x != nil {
		return x.HasLog
	}
	return false
}

func (x *DexTrade) GetDex() *DexInfo {
	if x != nil {
		return x.Dex
	}
	return nil
}

func (x *DexTrade) GetBuy() *TradeSide {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *DexTrade) GetSell() *TradeSide {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *DexTrade) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *DexTrade) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DexTrade) GetFees() []*TradeFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *DexTrade) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DexTrade) GetTransactionHeader() *TransactionHeader {
	if x != nil {
		return x.TransactionHeader
	}
	return nil
}

func (x *DexTrade) GetTransactionSignature() *Signature {
	if x != nil {
		return x.TransactionSignature
	}
	return nil
}

type DexBlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain    *Chain       `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Header   *BlockHeader `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	Trades   []*DexTrade  `protobuf:"bytes,5,rep,name=Trades,proto3" json:"Trades,omitempty"`
	L1Header *BlockHeader `protobuf:"bytes,6,opt,name=L1Header,proto3,oneof" json:"L1Header,omitempty"`
}

func (x *DexBlockMessage) Reset() {
	*x = DexBlockMessage{}
	mi := &file_evm_dex_block_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexBlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexBlockMessage) ProtoMessage() {}

func (x *DexBlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_evm_dex_block_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexBlockMessage.ProtoReflect.Descriptor instead.
func (*DexBlockMessage) Descriptor() ([]byte, []int) {
	return file_evm_dex_block_message_proto_rawDescGZIP(), []int{5}
}

func (x *DexBlockMessage) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *DexBlockMessage) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DexBlockMessage) GetTrades() []*DexTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *DexBlockMessage) GetL1Header() *BlockHeader {
	if x != nil {
		return x.L1Header
	}
	return nil
}

var File_evm_dex_block_message_proto protoreflect.FileDescriptor

var file_evm_dex_block_message_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x65, 0x76, 0x6d, 0x2f, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65,
	0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x17, 0x65, 0x76, 0x6d,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x65, 0x76, 0x6d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x03, 0x0a, 0x07, 0x44, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x37, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x14, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x52, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x42, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42,
	0x75, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x33, 0x0a,
	0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x9d,
	0x04, 0x0a, 0x08, 0x44, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x4c, 0x6f, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x48, 0x61, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x27, 0x0a,
	0x03, 0x44, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x03, 0x44, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x03, 0x42, 0x75,
	0x79, 0x12, 0x2b, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x2a, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x52, 0x04, 0x46, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x4d, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x0f, 0x44, 0x65, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x31, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x08, 0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x08, 0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x4c, 0x31, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_evm_dex_block_message_proto_rawDescOnce sync.Once
	file_evm_dex_block_message_proto_rawDescData = file_evm_dex_block_message_proto_rawDesc
)

func file_evm_dex_block_message_proto_rawDescGZIP() []byte {
	file_evm_dex_block_message_proto_rawDescOnce.Do(func() {
		file_evm_dex_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_evm_dex_block_message_proto_rawDescData)
	})
	return file_evm_dex_block_message_proto_rawDescData
}

var file_evm_dex_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_evm_dex_block_message_proto_goTypes = []any{
	(*DexInfo)(nil),           // 0: evm_messages.DexInfo
	(*TradeAsset)(nil),        // 1: evm_messages.TradeAsset
	(*TradeSide)(nil),         // 2: evm_messages.TradeSide
	(*TradeFee)(nil),          // 3: evm_messages.TradeFee
	(*DexTrade)(nil),          // 4: evm_messages.DexTrade
	(*DexBlockMessage)(nil),   // 5: evm_messages.DexBlockMessage
	(*TokenInfo)(nil),         // 6: evm_messages.TokenInfo
	(*TransactionHeader)(nil), // 7: evm_messages.TransactionHeader
	(*Signature)(nil),         // 8: evm_messages.Signature
	(*Chain)(nil),             // 9: evm_messages.Chain
	(*BlockHeader)(nil),       // 10: evm_messages.BlockHeader
}
var file_evm_dex_block_message_proto_depIdxs = []int32{
	6,  // 0: evm_messages.DexInfo.Pair:type_name -> evm_messages.TokenInfo
	6,  // 1: evm_messages.DexInfo.Currencies:type_name -> evm_messages.TokenInfo
	6,  // 2: evm_messages.DexInfo.UnderlyingCurrencies:type_name -> evm_messages.TokenInfo
	6,  // 3: evm_messages.TradeAsset.Currency:type_name -> evm_messages.TokenInfo
	1,  // 4: evm_messages.TradeSide.Assets:type_name -> evm_messages.TradeAsset
	6,  // 5: evm_messages.TradeFee.Currency:type_name -> evm_messages.TokenInfo
	0,  // 6: evm_messages.DexTrade.Dex:type_name -> evm_messages.DexInfo
	2,  // 7: evm_messages.DexTrade.Buy:type_name -> evm_messages.TradeSide
	2,  // 8: evm_messages.DexTrade.Sell:type_name -> evm_messages.TradeSide
	3,  // 9: evm_messages.DexTrade.Fees:type_name -> evm_messages.TradeFee
	7,  // 10: evm_messages.DexTrade.TransactionHeader:type_name -> evm_messages.TransactionHeader
	8,  // 11: evm_messages.DexTrade.TransactionSignature:type_name -> evm_messages.Signature
	9,  // 12: evm_messages.DexBlockMessage.Chain:type_name -> evm_messages.Chain
	10, // 13: evm_messages.DexBlockMessage.Header:type_name -> evm_messages.BlockHeader
	4,  // 14: evm_messages.DexBlockMessage.Trades:type_name -> evm_messages.DexTrade
	10, // 15: evm_messages.DexBlockMessage.L1Header:type_name -> evm_messages.BlockHeader
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_evm_dex_block_message_proto_init() }
func file_evm_dex_block_message_proto_init() {
	if File_evm_dex_block_message_proto != nil {
		return
	}
	file_evm_block_message_proto_init()
	file_evm_token_block_message_proto_init()
	file_evm_dex_block_message_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evm_dex_block_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_evm_dex_block_message_proto_goTypes,
		DependencyIndexes: file_evm_dex_block_message_proto_depIdxs,
		MessageInfos:      file_evm_dex_block_message_proto_msgTypes,
	}.Build()
	File_evm_dex_block_message_proto = out.File
	file_evm_dex_block_message_proto_rawDesc = nil
	file_evm_dex_block_message_proto_goTypes = nil
	file_evm_dex_block_message_proto_depIdxs = nil
}
