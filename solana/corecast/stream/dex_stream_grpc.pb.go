// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: solana/corecast/dex_stream.proto

package solana_corecast

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DexStream_Trades_FullMethodName = "/solana_corecast.DexStream/Trades"
	DexStream_Orders_FullMethodName = "/solana_corecast.DexStream/Orders"
	DexStream_Pools_FullMethodName  = "/solana_corecast.DexStream/Pools"
)

// DexStreamClient is the client API for DexStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DexStreamClient interface {
	Trades(ctx context.Context, in *SubscribeTradesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DexTradeStreamMessage], error)
	Orders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DexOrderStreamMessage], error)
	Pools(ctx context.Context, in *SubscribePoolsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PoolLiquidityChangeStreamMessage], error)
}

type dexStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewDexStreamClient(cc grpc.ClientConnInterface) DexStreamClient {
	return &dexStreamClient{cc}
}

func (c *dexStreamClient) Trades(ctx context.Context, in *SubscribeTradesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DexTradeStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DexStream_ServiceDesc.Streams[0], DexStream_Trades_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTradesRequest, DexTradeStreamMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DexStream_TradesClient = grpc.ServerStreamingClient[DexTradeStreamMessage]

func (c *dexStreamClient) Orders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DexOrderStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DexStream_ServiceDesc.Streams[1], DexStream_Orders_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeOrdersRequest, DexOrderStreamMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DexStream_OrdersClient = grpc.ServerStreamingClient[DexOrderStreamMessage]

func (c *dexStreamClient) Pools(ctx context.Context, in *SubscribePoolsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PoolLiquidityChangeStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DexStream_ServiceDesc.Streams[2], DexStream_Pools_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribePoolsRequest, PoolLiquidityChangeStreamMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DexStream_PoolsClient = grpc.ServerStreamingClient[PoolLiquidityChangeStreamMessage]

// DexStreamServer is the server API for DexStream service.
// All implementations must embed UnimplementedDexStreamServer
// for forward compatibility.
type DexStreamServer interface {
	Trades(*SubscribeTradesRequest, grpc.ServerStreamingServer[DexTradeStreamMessage]) error
	Orders(*SubscribeOrdersRequest, grpc.ServerStreamingServer[DexOrderStreamMessage]) error
	Pools(*SubscribePoolsRequest, grpc.ServerStreamingServer[PoolLiquidityChangeStreamMessage]) error
	mustEmbedUnimplementedDexStreamServer()
}

// UnimplementedDexStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDexStreamServer struct{}

func (UnimplementedDexStreamServer) Trades(*SubscribeTradesRequest, grpc.ServerStreamingServer[DexTradeStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Trades not implemented")
}
func (UnimplementedDexStreamServer) Orders(*SubscribeOrdersRequest, grpc.ServerStreamingServer[DexOrderStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Orders not implemented")
}
func (UnimplementedDexStreamServer) Pools(*SubscribePoolsRequest, grpc.ServerStreamingServer[PoolLiquidityChangeStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (UnimplementedDexStreamServer) mustEmbedUnimplementedDexStreamServer() {}
func (UnimplementedDexStreamServer) testEmbeddedByValue()                   {}

// UnsafeDexStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DexStreamServer will
// result in compilation errors.
type UnsafeDexStreamServer interface {
	mustEmbedUnimplementedDexStreamServer()
}

func RegisterDexStreamServer(s grpc.ServiceRegistrar, srv DexStreamServer) {
	// If the following call pancis, it indicates UnimplementedDexStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DexStream_ServiceDesc, srv)
}

func _DexStream_Trades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DexStreamServer).Trades(m, &grpc.GenericServerStream[SubscribeTradesRequest, DexTradeStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DexStream_TradesServer = grpc.ServerStreamingServer[DexTradeStreamMessage]

func _DexStream_Orders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DexStreamServer).Orders(m, &grpc.GenericServerStream[SubscribeOrdersRequest, DexOrderStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DexStream_OrdersServer = grpc.ServerStreamingServer[DexOrderStreamMessage]

func _DexStream_Pools_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePoolsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DexStreamServer).Pools(m, &grpc.GenericServerStream[SubscribePoolsRequest, PoolLiquidityChangeStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DexStream_PoolsServer = grpc.ServerStreamingServer[PoolLiquidityChangeStreamMessage]

// DexStream_ServiceDesc is the grpc.ServiceDesc for DexStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DexStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solana_corecast.DexStream",
	HandlerType: (*DexStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Trades",
			Handler:       _DexStream_Trades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Orders",
			Handler:       _DexStream_Orders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Pools",
			Handler:       _DexStream_Pools_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "solana/corecast/dex_stream.proto",
}
