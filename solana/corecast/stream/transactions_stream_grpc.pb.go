// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: solana/corecast/transactions_stream.proto

package solana_corecast

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionsStream_Transactions_FullMethodName = "/solana_corecast.TransactionsStream/Transactions"
	TransactionsStream_Transfers_FullMethodName    = "/solana_corecast.TransactionsStream/Transfers"
	TransactionsStream_Balances_FullMethodName     = "/solana_corecast.TransactionsStream/Balances"
)

// TransactionsStreamClient is the client API for TransactionsStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsStreamClient interface {
	Transactions(ctx context.Context, in *SubscribeTransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ParsedTransactionStreamMessage], error)
	Transfers(ctx context.Context, in *SubscribeTransfersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransferStreamMessage], error)
	Balances(ctx context.Context, in *SubscribeBalanceUpdateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalanceUpdateStreamMessage], error)
}

type transactionsStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsStreamClient(cc grpc.ClientConnInterface) TransactionsStreamClient {
	return &transactionsStreamClient{cc}
}

func (c *transactionsStreamClient) Transactions(ctx context.Context, in *SubscribeTransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ParsedTransactionStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionsStream_ServiceDesc.Streams[0], TransactionsStream_Transactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTransactionsRequest, ParsedTransactionStreamMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsStream_TransactionsClient = grpc.ServerStreamingClient[ParsedTransactionStreamMessage]

func (c *transactionsStreamClient) Transfers(ctx context.Context, in *SubscribeTransfersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransferStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionsStream_ServiceDesc.Streams[1], TransactionsStream_Transfers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTransfersRequest, TransferStreamMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsStream_TransfersClient = grpc.ServerStreamingClient[TransferStreamMessage]

func (c *transactionsStreamClient) Balances(ctx context.Context, in *SubscribeBalanceUpdateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalanceUpdateStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionsStream_ServiceDesc.Streams[2], TransactionsStream_Balances_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeBalanceUpdateRequest, BalanceUpdateStreamMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsStream_BalancesClient = grpc.ServerStreamingClient[BalanceUpdateStreamMessage]

// TransactionsStreamServer is the server API for TransactionsStream service.
// All implementations must embed UnimplementedTransactionsStreamServer
// for forward compatibility.
type TransactionsStreamServer interface {
	Transactions(*SubscribeTransactionsRequest, grpc.ServerStreamingServer[ParsedTransactionStreamMessage]) error
	Transfers(*SubscribeTransfersRequest, grpc.ServerStreamingServer[TransferStreamMessage]) error
	Balances(*SubscribeBalanceUpdateRequest, grpc.ServerStreamingServer[BalanceUpdateStreamMessage]) error
	mustEmbedUnimplementedTransactionsStreamServer()
}

// UnimplementedTransactionsStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionsStreamServer struct{}

func (UnimplementedTransactionsStreamServer) Transactions(*SubscribeTransactionsRequest, grpc.ServerStreamingServer[ParsedTransactionStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}
func (UnimplementedTransactionsStreamServer) Transfers(*SubscribeTransfersRequest, grpc.ServerStreamingServer[TransferStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Transfers not implemented")
}
func (UnimplementedTransactionsStreamServer) Balances(*SubscribeBalanceUpdateRequest, grpc.ServerStreamingServer[BalanceUpdateStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Balances not implemented")
}
func (UnimplementedTransactionsStreamServer) mustEmbedUnimplementedTransactionsStreamServer() {}
func (UnimplementedTransactionsStreamServer) testEmbeddedByValue()                            {}

// UnsafeTransactionsStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsStreamServer will
// result in compilation errors.
type UnsafeTransactionsStreamServer interface {
	mustEmbedUnimplementedTransactionsStreamServer()
}

func RegisterTransactionsStreamServer(s grpc.ServiceRegistrar, srv TransactionsStreamServer) {
	// If the following call pancis, it indicates UnimplementedTransactionsStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionsStream_ServiceDesc, srv)
}

func _TransactionsStream_Transactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsStreamServer).Transactions(m, &grpc.GenericServerStream[SubscribeTransactionsRequest, ParsedTransactionStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsStream_TransactionsServer = grpc.ServerStreamingServer[ParsedTransactionStreamMessage]

func _TransactionsStream_Transfers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTransfersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsStreamServer).Transfers(m, &grpc.GenericServerStream[SubscribeTransfersRequest, TransferStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsStream_TransfersServer = grpc.ServerStreamingServer[TransferStreamMessage]

func _TransactionsStream_Balances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBalanceUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsStreamServer).Balances(m, &grpc.GenericServerStream[SubscribeBalanceUpdateRequest, BalanceUpdateStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionsStream_BalancesServer = grpc.ServerStreamingServer[BalanceUpdateStreamMessage]

// TransactionsStream_ServiceDesc is the grpc.ServiceDesc for TransactionsStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionsStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solana_corecast.TransactionsStream",
	HandlerType: (*TransactionsStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transactions",
			Handler:       _TransactionsStream_Transactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Transfers",
			Handler:       _TransactionsStream_Transfers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Balances",
			Handler:       _TransactionsStream_Balances_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "solana/corecast/transactions_stream.proto",
}
