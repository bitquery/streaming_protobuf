// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: solana/parsed_idl_block_message.proto

package solana_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParsedArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Types that are assignable to Value:
	//
	//	*ParsedArgument_String_
	//	*ParsedArgument_UInt
	//	*ParsedArgument_Int
	//	*ParsedArgument_Bool
	//	*ParsedArgument_Float
	//	*ParsedArgument_Json
	//	*ParsedArgument_Address
	Value isParsedArgument_Value `protobuf_oneof:"Value"`
}

func (x *ParsedArgument) Reset() {
	*x = ParsedArgument{}
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedArgument) ProtoMessage() {}

func (x *ParsedArgument) ProtoReflect() protoreflect.Message {
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedArgument.ProtoReflect.Descriptor instead.
func (*ParsedArgument) Descriptor() ([]byte, []int) {
	return file_solana_parsed_idl_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *ParsedArgument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParsedArgument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *ParsedArgument) GetValue() isParsedArgument_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ParsedArgument) GetString_() string {
	if x, ok := x.GetValue().(*ParsedArgument_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ParsedArgument) GetUInt() uint64 {
	if x, ok := x.GetValue().(*ParsedArgument_UInt); ok {
		return x.UInt
	}
	return 0
}

func (x *ParsedArgument) GetInt() int64 {
	if x, ok := x.GetValue().(*ParsedArgument_Int); ok {
		return x.Int
	}
	return 0
}

func (x *ParsedArgument) GetBool() bool {
	if x, ok := x.GetValue().(*ParsedArgument_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *ParsedArgument) GetFloat() float32 {
	if x, ok := x.GetValue().(*ParsedArgument_Float); ok {
		return x.Float
	}
	return 0
}

func (x *ParsedArgument) GetJson() string {
	if x, ok := x.GetValue().(*ParsedArgument_Json); ok {
		return x.Json
	}
	return ""
}

func (x *ParsedArgument) GetAddress() []byte {
	if x, ok := x.GetValue().(*ParsedArgument_Address); ok {
		return x.Address
	}
	return nil
}

type isParsedArgument_Value interface {
	isParsedArgument_Value()
}

type ParsedArgument_String_ struct {
	String_ string `protobuf:"bytes,3,opt,name=String,proto3,oneof"`
}

type ParsedArgument_UInt struct {
	UInt uint64 `protobuf:"varint,5,opt,name=UInt,proto3,oneof"`
}

type ParsedArgument_Int struct {
	Int int64 `protobuf:"varint,6,opt,name=Int,proto3,oneof"`
}

type ParsedArgument_Bool struct {
	Bool bool `protobuf:"varint,7,opt,name=Bool,proto3,oneof"`
}

type ParsedArgument_Float struct {
	Float float32 `protobuf:"fixed32,8,opt,name=Float,proto3,oneof"`
}

type ParsedArgument_Json struct {
	Json string `protobuf:"bytes,9,opt,name=Json,proto3,oneof"`
}

type ParsedArgument_Address struct {
	Address []byte `protobuf:"bytes,10,opt,name=Address,proto3,oneof"`
}

func (*ParsedArgument_String_) isParsedArgument_Value() {}

func (*ParsedArgument_UInt) isParsedArgument_Value() {}

func (*ParsedArgument_Int) isParsedArgument_Value() {}

func (*ParsedArgument_Bool) isParsedArgument_Value() {}

func (*ParsedArgument_Float) isParsedArgument_Value() {}

func (*ParsedArgument_Json) isParsedArgument_Value() {}

func (*ParsedArgument_Address) isParsedArgument_Value() {}

type Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      []byte            `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Parsed       bool              `protobuf:"varint,2,opt,name=Parsed,proto3" json:"Parsed,omitempty"`
	Json         string            `protobuf:"bytes,3,opt,name=Json,proto3" json:"Json,omitempty"`
	Signature    []byte            `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Name         string            `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Method       string            `protobuf:"bytes,6,opt,name=Method,proto3" json:"Method,omitempty"`
	Arguments    []*ParsedArgument `protobuf:"bytes,7,rep,name=Arguments,proto3" json:"Arguments,omitempty"`
	AccountNames []string          `protobuf:"bytes,8,rep,name=AccountNames,proto3" json:"AccountNames,omitempty"`
}

func (x *Program) Reset() {
	*x = Program{}
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Program) ProtoMessage() {}

func (x *Program) ProtoReflect() protoreflect.Message {
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Program.ProtoReflect.Descriptor instead.
func (*Program) Descriptor() ([]byte, []int) {
	return file_solana_parsed_idl_block_message_proto_rawDescGZIP(), []int{1}
}

func (x *Program) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Program) GetParsed() bool {
	if x != nil {
		return x.Parsed
	}
	return false
}

func (x *Program) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *Program) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Program) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Program) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Program) GetArguments() []*ParsedArgument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Program) GetAccountNames() []string {
	if x != nil {
		return x.AccountNames
	}
	return nil
}

type ParsedIdlInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index               uint32           `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Depth               uint32           `protobuf:"varint,2,opt,name=Depth,proto3" json:"Depth,omitempty"`
	CallPath            []uint32         `protobuf:"varint,3,rep,packed,name=CallPath,proto3" json:"CallPath,omitempty"`
	CallerIndex         int32            `protobuf:"varint,4,opt,name=CallerIndex,proto3" json:"CallerIndex,omitempty"`
	AncestorIndexes     []uint32         `protobuf:"varint,5,rep,packed,name=AncestorIndexes,proto3" json:"AncestorIndexes,omitempty"`
	ExternalSeqNumber   uint32           `protobuf:"varint,6,opt,name=ExternalSeqNumber,proto3" json:"ExternalSeqNumber,omitempty"`
	InternalSeqNumber   uint32           `protobuf:"varint,7,opt,name=InternalSeqNumber,proto3" json:"InternalSeqNumber,omitempty"`
	Program             *Program         `protobuf:"bytes,8,opt,name=Program,proto3,oneof" json:"Program,omitempty"`
	Accounts            []*Account       `protobuf:"bytes,9,rep,name=Accounts,proto3" json:"Accounts,omitempty"`
	Logs                []string         `protobuf:"bytes,10,rep,name=Logs,proto3" json:"Logs,omitempty"`
	BalanceUpdates      []*BalanceUpdate `protobuf:"bytes,11,rep,name=BalanceUpdates,proto3" json:"BalanceUpdates,omitempty"`
	TokenBalanceUpdates []*BalanceUpdate `protobuf:"bytes,12,rep,name=TokenBalanceUpdates,proto3" json:"TokenBalanceUpdates,omitempty"`
	Data                []byte           `protobuf:"bytes,13,opt,name=Data,proto3" json:"Data,omitempty"`
	TokenSupplyUpdates  []*BalanceUpdate `protobuf:"bytes,14,rep,name=TokenSupplyUpdates,proto3" json:"TokenSupplyUpdates,omitempty"`
}

func (x *ParsedIdlInstruction) Reset() {
	*x = ParsedIdlInstruction{}
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedIdlInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedIdlInstruction) ProtoMessage() {}

func (x *ParsedIdlInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedIdlInstruction.ProtoReflect.Descriptor instead.
func (*ParsedIdlInstruction) Descriptor() ([]byte, []int) {
	return file_solana_parsed_idl_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *ParsedIdlInstruction) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ParsedIdlInstruction) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ParsedIdlInstruction) GetCallPath() []uint32 {
	if x != nil {
		return x.CallPath
	}
	return nil
}

func (x *ParsedIdlInstruction) GetCallerIndex() int32 {
	if x != nil {
		return x.CallerIndex
	}
	return 0
}

func (x *ParsedIdlInstruction) GetAncestorIndexes() []uint32 {
	if x != nil {
		return x.AncestorIndexes
	}
	return nil
}

func (x *ParsedIdlInstruction) GetExternalSeqNumber() uint32 {
	if x != nil {
		return x.ExternalSeqNumber
	}
	return 0
}

func (x *ParsedIdlInstruction) GetInternalSeqNumber() uint32 {
	if x != nil {
		return x.InternalSeqNumber
	}
	return 0
}

func (x *ParsedIdlInstruction) GetProgram() *Program {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *ParsedIdlInstruction) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *ParsedIdlInstruction) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ParsedIdlInstruction) GetBalanceUpdates() []*BalanceUpdate {
	if x != nil {
		return x.BalanceUpdates
	}
	return nil
}

func (x *ParsedIdlInstruction) GetTokenBalanceUpdates() []*BalanceUpdate {
	if x != nil {
		return x.TokenBalanceUpdates
	}
	return nil
}

func (x *ParsedIdlInstruction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ParsedIdlInstruction) GetTokenSupplyUpdates() []*BalanceUpdate {
	if x != nil {
		return x.TokenSupplyUpdates
	}
	return nil
}

type ParsedIdlTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                    uint32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Signature                []byte                  `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Status                   *TransactionStatus      `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
	Header                   *TransactionHeader      `protobuf:"bytes,4,opt,name=Header,proto3" json:"Header,omitempty"`
	TotalBalanceUpdates      []*BalanceUpdate        `protobuf:"bytes,5,rep,name=TotalBalanceUpdates,proto3" json:"TotalBalanceUpdates,omitempty"`
	TotalTokenBalanceUpdates []*BalanceUpdate        `protobuf:"bytes,6,rep,name=TotalTokenBalanceUpdates,proto3" json:"TotalTokenBalanceUpdates,omitempty"`
	ParsedIdlInstructions    []*ParsedIdlInstruction `protobuf:"bytes,7,rep,name=ParsedIdlInstructions,proto3" json:"ParsedIdlInstructions,omitempty"`
}

func (x *ParsedIdlTransaction) Reset() {
	*x = ParsedIdlTransaction{}
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedIdlTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedIdlTransaction) ProtoMessage() {}

func (x *ParsedIdlTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedIdlTransaction.ProtoReflect.Descriptor instead.
func (*ParsedIdlTransaction) Descriptor() ([]byte, []int) {
	return file_solana_parsed_idl_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *ParsedIdlTransaction) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ParsedIdlTransaction) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ParsedIdlTransaction) GetStatus() *TransactionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ParsedIdlTransaction) GetHeader() *TransactionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ParsedIdlTransaction) GetTotalBalanceUpdates() []*BalanceUpdate {
	if x != nil {
		return x.TotalBalanceUpdates
	}
	return nil
}

func (x *ParsedIdlTransaction) GetTotalTokenBalanceUpdates() []*BalanceUpdate {
	if x != nil {
		return x.TotalTokenBalanceUpdates
	}
	return nil
}

func (x *ParsedIdlTransaction) GetParsedIdlInstructions() []*ParsedIdlInstruction {
	if x != nil {
		return x.ParsedIdlInstructions
	}
	return nil
}

type ParsedIdlBlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *BlockHeader            `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Transactions []*ParsedIdlTransaction `protobuf:"bytes,2,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	Rewards      []*Reward               `protobuf:"bytes,3,rep,name=Rewards,proto3" json:"Rewards,omitempty"`
}

func (x *ParsedIdlBlockMessage) Reset() {
	*x = ParsedIdlBlockMessage{}
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedIdlBlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedIdlBlockMessage) ProtoMessage() {}

func (x *ParsedIdlBlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_solana_parsed_idl_block_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedIdlBlockMessage.ProtoReflect.Descriptor instead.
func (*ParsedIdlBlockMessage) Descriptor() ([]byte, []int) {
	return file_solana_parsed_idl_block_message_proto_rawDescGZIP(), []int{4}
}

func (x *ParsedIdlBlockMessage) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ParsedIdlBlockMessage) GetTransactions() []*ParsedIdlTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ParsedIdlBlockMessage) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

var File_solana_parsed_idl_block_message_proto protoreflect.FileDescriptor

var file_solana_parsed_idl_block_message_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x1a, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x55, 0x49, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x55, 0x49, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x03, 0x49, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03,
	0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x14, 0x0a, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfc, 0x01, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4a, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x93, 0x05, 0x0a, 0x14,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x49, 0x64, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28,
	0x0a, 0x0f, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48,
	0x00, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x08, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x13, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x22, 0xcd, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x49, 0x64, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x18, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x18, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x49, 0x64,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x49, 0x64, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x64, 0x49, 0x64, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xcb, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x49, 0x64, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64,
	0x49, 0x64, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_solana_parsed_idl_block_message_proto_rawDescOnce sync.Once
	file_solana_parsed_idl_block_message_proto_rawDescData = file_solana_parsed_idl_block_message_proto_rawDesc
)

func file_solana_parsed_idl_block_message_proto_rawDescGZIP() []byte {
	file_solana_parsed_idl_block_message_proto_rawDescOnce.Do(func() {
		file_solana_parsed_idl_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_solana_parsed_idl_block_message_proto_rawDescData)
	})
	return file_solana_parsed_idl_block_message_proto_rawDescData
}

var file_solana_parsed_idl_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_solana_parsed_idl_block_message_proto_goTypes = []any{
	(*ParsedArgument)(nil),        // 0: solana_messages.ParsedArgument
	(*Program)(nil),               // 1: solana_messages.Program
	(*ParsedIdlInstruction)(nil),  // 2: solana_messages.ParsedIdlInstruction
	(*ParsedIdlTransaction)(nil),  // 3: solana_messages.ParsedIdlTransaction
	(*ParsedIdlBlockMessage)(nil), // 4: solana_messages.ParsedIdlBlockMessage
	(*Account)(nil),               // 5: solana_messages.Account
	(*BalanceUpdate)(nil),         // 6: solana_messages.BalanceUpdate
	(*TransactionStatus)(nil),     // 7: solana_messages.TransactionStatus
	(*TransactionHeader)(nil),     // 8: solana_messages.TransactionHeader
	(*BlockHeader)(nil),           // 9: solana_messages.BlockHeader
	(*Reward)(nil),                // 10: solana_messages.Reward
}
var file_solana_parsed_idl_block_message_proto_depIdxs = []int32{
	0,  // 0: solana_messages.Program.Arguments:type_name -> solana_messages.ParsedArgument
	1,  // 1: solana_messages.ParsedIdlInstruction.Program:type_name -> solana_messages.Program
	5,  // 2: solana_messages.ParsedIdlInstruction.Accounts:type_name -> solana_messages.Account
	6,  // 3: solana_messages.ParsedIdlInstruction.BalanceUpdates:type_name -> solana_messages.BalanceUpdate
	6,  // 4: solana_messages.ParsedIdlInstruction.TokenBalanceUpdates:type_name -> solana_messages.BalanceUpdate
	6,  // 5: solana_messages.ParsedIdlInstruction.TokenSupplyUpdates:type_name -> solana_messages.BalanceUpdate
	7,  // 6: solana_messages.ParsedIdlTransaction.Status:type_name -> solana_messages.TransactionStatus
	8,  // 7: solana_messages.ParsedIdlTransaction.Header:type_name -> solana_messages.TransactionHeader
	6,  // 8: solana_messages.ParsedIdlTransaction.TotalBalanceUpdates:type_name -> solana_messages.BalanceUpdate
	6,  // 9: solana_messages.ParsedIdlTransaction.TotalTokenBalanceUpdates:type_name -> solana_messages.BalanceUpdate
	2,  // 10: solana_messages.ParsedIdlTransaction.ParsedIdlInstructions:type_name -> solana_messages.ParsedIdlInstruction
	9,  // 11: solana_messages.ParsedIdlBlockMessage.Header:type_name -> solana_messages.BlockHeader
	3,  // 12: solana_messages.ParsedIdlBlockMessage.Transactions:type_name -> solana_messages.ParsedIdlTransaction
	10, // 13: solana_messages.ParsedIdlBlockMessage.Rewards:type_name -> solana_messages.Reward
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_solana_parsed_idl_block_message_proto_init() }
func file_solana_parsed_idl_block_message_proto_init() {
	if File_solana_parsed_idl_block_message_proto != nil {
		return
	}
	file_solana_block_message_proto_init()
	file_solana_parsed_idl_block_message_proto_msgTypes[0].OneofWrappers = []any{
		(*ParsedArgument_String_)(nil),
		(*ParsedArgument_UInt)(nil),
		(*ParsedArgument_Int)(nil),
		(*ParsedArgument_Bool)(nil),
		(*ParsedArgument_Float)(nil),
		(*ParsedArgument_Json)(nil),
		(*ParsedArgument_Address)(nil),
	}
	file_solana_parsed_idl_block_message_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_solana_parsed_idl_block_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_solana_parsed_idl_block_message_proto_goTypes,
		DependencyIndexes: file_solana_parsed_idl_block_message_proto_depIdxs,
		MessageInfos:      file_solana_parsed_idl_block_message_proto_msgTypes,
	}.Build()
	File_solana_parsed_idl_block_message_proto = out.File
	file_solana_parsed_idl_block_message_proto_rawDesc = nil
	file_solana_parsed_idl_block_message_proto_goTypes = nil
	file_solana_parsed_idl_block_message_proto_depIdxs = nil
}
